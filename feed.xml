<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://firsh.me/feed.xml" rel="self" type="application/atom+xml" /><link href="http://firsh.me/" rel="alternate" type="text/html" /><updated>2017-06-25T01:00:15+08:00</updated><id>http://firsh.me/</id><title type="html">张建新</title><subtitle>张建新个人博客</subtitle><author><name>张建新</name></author><entry><title type="html">IDEA Java注释模板设置详解</title><link href="http://firsh.me/2017/06/24/java-development-v-desc/" rel="alternate" type="text/html" title="IDEA Java注释模板设置详解" /><published>2017-06-24T00:00:00+08:00</published><updated>2017-06-24T00:00:00+08:00</updated><id>http://firsh.me/2017/06/24/java-development-v-desc</id><content type="html" xml:base="http://firsh.me/2017/06/24/java-development-v-desc/">&lt;p&gt;IDEA Java注释模板设置详解
设置注释模板的入口： Window-&amp;gt;Preference-&amp;gt;Java-&amp;gt;Code Style-&amp;gt;Code Template 然后展开Comments节点就是所有需设置注释的元素啦。现就每一个元素逐一介绍：&lt;/p&gt;

&lt;h2 id=&quot;1文件files注释标签&quot;&gt;1、文件(Files)注释标签：&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;cm&quot;&gt;/**   
* @Title: ${file_name}
* @Package ${package_name}
* @Description: ${todo}(用一句话描述该文件做什么)
* @author A18ccms A18ccms_gmail_com   
* @date ${date} ${time}
* @version V1.0   
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;2类型types注释标签类的注释&quot;&gt;2.类型(Types)注释标签（类的注释）：&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
* @ClassName: ${type_name}
* @Description: ${todo}(这里用一句话描述这个类的作用)
* @author A18ccms a18ccms_gmail_com
* @date ${date} ${time}
* 
* ${tags}
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;3字段fields注释标签&quot;&gt;3.字段(Fields)注释标签：&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
* @Fields ${field} : ${todo}(用一句话描述这个变量表示什么)
*/&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;构造函数标签：&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
* &amp;lt;p&amp;gt;Title: &amp;lt;/p&amp;gt;
* &amp;lt;p&amp;gt;Description: &amp;lt;/p&amp;gt;
* ${tags}
*/&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;4方法constructor--methods标签&quot;&gt;4.方法(Constructor &amp;amp; Methods)标签：&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
* @Title: ${enclosing_method}
* @Description: ${todo}(这里用一句话描述这个方法的作用)
* @param ${tags}    设定文件
* @return ${return_type}    返回类型
* @throws
*/&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&quot;5覆盖方法overriding-methods标签&quot;&gt;5.覆盖方法(Overriding Methods)标签：&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;cm&quot;&gt;/* (非 Javadoc)
* &amp;lt;p&amp;gt;Title: ${enclosing_method}&amp;lt;/p&amp;gt;
* &amp;lt;p&amp;gt;Description: &amp;lt;/p&amp;gt;
* ${tags}
* ${see_to_overridden}
*/&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;6-代表方法delegate-methods标签&quot;&gt;6. 代表方法(Delegate Methods)标签：&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
* ${tags}
* ${see_to_target}
*/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;getter&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;方法标签：&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
* @return ${bare_field_name}
*/&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;setter&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;方法标签：&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
* @param ${param} 要设置的 ${bare_field_name}
*/&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>张建新</name></author><summary type="html">IDEA Java注释模板设置详解 设置注释模板的入口： Window-&amp;gt;Preference-&amp;gt;Java-&amp;gt;Code Style-&amp;gt;Code Template 然后展开Comments节点就是所有需设置注释的元素啦。现就每一个元素逐一介绍：</summary></entry><entry><title type="html">java 开发代码规范，命名规范</title><link href="http://firsh.me/2017/06/24/java-development-b-desc/" rel="alternate" type="text/html" title="java 开发代码规范，命名规范" /><published>2017-06-24T00:00:00+08:00</published><updated>2017-06-24T00:00:00+08:00</updated><id>http://firsh.me/2017/06/24/java-development-b-desc</id><content type="html" xml:base="http://firsh.me/2017/06/24/java-development-b-desc/">&lt;p&gt;Java 代码书写规范，以及部分注释。&lt;/p&gt;

&lt;h2 id=&quot;1java-规范很重要&quot;&gt;1、Java 规范很重要：&lt;/h2&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;代码书写规范
                                                             
一、           命名规范（所有命名均要求有意义）

项目命名规范
       所有工程名全部为小写单词，要求有意义，能代表所做的是什么项目
       
包命名规范
       所有的包命名全部由小写英文单词
       以下的 | 符号代表或者取其一的意思
       我们采用com|org|edu|net.公司名|组织名|学校名|网站名.项目名称.分层文件夹名
       例如：项目中采用 com.osiit.shopping.servlet

类命名规范
       所有Java类采取大写字母开头，如果类名称由多个单词组成，则每个单词的首字母均应为大 写例如AdminBean；如果类名称中包含单词缩写，则这个所写词的每个字母均应大写，如：XMLExample,还有一点命名技巧就是由于类是设计用来 代表对象的，所以在命名类时应尽量选择名词。    　　   
方法命名规范
驼峰命名法
方法名的第一个单词应以小写字母作为开头，后面的每一个单词的首字母则用大写字母开头。
例如:getParameter();

变量，参数命名规范
驼峰命名法
变量名|参数名的第一个单词应以小写字母作为开头，后面的每一个单词的首字母则用大写开头。
例如：pageContext.

常量命名方法（即final类型的变量命名规则）
       单词的所有字母全部用大写字母进行命名，如果涉及到多个单词那么要用 _ 分开
       例如:MAX_VALUE



二、           注释规范

文件注释规范：写在所有类的文件的最上边的注释
/*
* 文 件 名： 
* 版权(c) 2009-xxx公司 xxx项目组：
* 版 本 号： 
*/

       类 | 接口 | 抽象类 注释规范：写在类声明的上边，包名的下边
/**                     
* Project:  项目工程名                                          
* Module ID:  (模块)类编号，可以引用系统设计中的类编号    
* Comments:  对此类的描述，可以引用系统设计中的描述                                                                                             
* @author： 作者名称     
* @author： 作者名称
* @version 1.0 , 2009-5-20 
* @since  JDK版本号                   
* @see 一些相应的参考类，没有的话可以不加
* @see          
* Modified By： 修改人姓名(如果有其他人修改时增加这三项)                   
* Modified Date: 修改日期                                   
* Why &amp;amp; What is modified  修改原因描述 
*/

构造方法注释规范：写在所要注释的构造方法前
/** 
* Description ：  构造函数的描述, 
* @param：  参数名
*/

方法注释规范：写在所要注释的方法前
/** 
* 方法描述： 
* @param：  参数名
* @param：  参数名(解释：@param后面空格后跟着参数的变量名字 
*            （不是类型），空格后跟着对该参数的描述。)* 
* @return:    类型 &amp;lt;说明&amp;gt; ,如果返回不同的值有不同的意义要加以说明。
*@throws : 抛出的异常  
*/

成员变量 | 成员常量注释规范：写到需要进行注释的变量或者常量的上边
/** 变量或者常量的描述 */

局部变量注释规范：在每个局部变量上边即可。
//

三、           格式规范

所有的类代码文件要求都有统一的缩进对齐

四、           页面书写规范
1.       Jsp页面上方增加统一的页面注释，例如：
&amp;lt;!--*********** 增加商品页面 *************** --&amp;gt;
&amp;lt;!--
        作者:XXX
        创建日期：XXX
--&amp;gt;

2.       如果是像网站首页那样的大页面,遍历数据的开始到结束都建议加上注释，方便以后检查,例如
&amp;lt;!-- *******************遍历商品列表开始********************--&amp;gt;
        中间是遍历的代码部分
&amp;lt;!-- *******************遍历商品列表结束********************--&amp;gt;
       
五、           页面注释规范
尽可能按照规范的html标签的写法，详细参见xhtml书写规则。 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;感谢孙浩大哥提醒代码规范的重要性。&lt;/li&gt;
&lt;/ul&gt;</content><author><name>张建新</name></author><summary type="html">Java 代码书写规范，以及部分注释。</summary></entry><entry><title type="html">ssh链接报错 Unable to negotiate with IP</title><link href="http://firsh.me/2017/06/22/sshd-error/" rel="alternate" type="text/html" title="ssh链接报错 Unable to negotiate with IP" /><published>2017-06-22T00:00:00+08:00</published><updated>2017-06-22T00:00:00+08:00</updated><id>http://firsh.me/2017/06/22/sshd-error</id><content type="html" xml:base="http://firsh.me/2017/06/22/sshd-error/">&lt;p&gt;ssh Unable to negotiate with 182.158.68.5 port 22: no matching host key type found. Their offer: ssh-dss&lt;/p&gt;

&lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;今天帮别人部署东西，远程连接服务器的时候发现发生了错误：。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Unable to negotiate with 182.158.68.5 port 22: no matching host key &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;found. Their offer: ssh-dss
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;解决方案&quot;&gt;解决方案&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;The version of OpenSSH included in 16.04 disables ssh-dss. There’s a neat page with legacy information that includes this issue: http://www.openssh.com/legacy.html
In a nutshell, you should add the option -oHostKeyAlgorithms=+ssh-dss to the SSH command:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh -oHostKeyAlgorithms&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;+ssh-dss root@182.158.68.5
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;成功登录&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  ~ ssh -oHostKeyAlgorithms&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;+ssh-dss root@182.158.68.5
The authenticity of host &lt;span class=&quot;s1&quot;&gt;'182.158.68.55 (182.158.68.5)'&lt;/span&gt; can&lt;span class=&quot;s1&quot;&gt;'t be established.
DSA key fingerprint is SHA256:LVWhbgb8q5TdW2QEsFjOVNp8ekW8UqPVE/KCbMOI4CM.
Are you sure you want to continue connecting (yes/no)? 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>张建新</name></author><summary type="html">ssh Unable to negotiate with 182.158.68.5 port 22: no matching host key type found. Their offer: ssh-dss</summary></entry><entry><title type="html">Kubernetes部分Volume类型介绍及yaml示例</title><link href="http://firsh.me/2017/06/22/kubernetes-v-nfs/" rel="alternate" type="text/html" title="Kubernetes部分Volume类型介绍及yaml示例" /><published>2017-06-22T00:00:00+08:00</published><updated>2017-06-22T00:00:00+08:00</updated><id>http://firsh.me/2017/06/22/kubernetes-v-nfs</id><content type="html" xml:base="http://firsh.me/2017/06/22/kubernetes-v-nfs/">&lt;p&gt;Kubernetes部分Volume类型介绍及yaml示例&lt;/p&gt;

&lt;h2 id=&quot;1emptydir本地数据卷&quot;&gt;1、EmptyDir（本地数据卷&lt;/h2&gt;

&lt;p&gt;　EmptyDir类型的volume创建于pod被调度到某个宿主机上的时候，而同一个pod内的容器都能读写EmptyDir中的同一个文件。一旦这个pod离开了这个宿主机，EmptyDirr中的数据就会被永久删除。所以目前EmptyDir类型的volume主要用作临时空间，比如Web服务器写日志或者tmp文件需要的临时目录。yaml示例如下：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@k8s-master demon2]# cat &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;-emptypath.yaml 

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Pod&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-emptypath&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-emptypath&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-emptypath&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;registry:5000/back_demon:1.0&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;log-storage&lt;/span&gt;
         &lt;span class=&quot;s&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/home/laizy/test/&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/run.sh&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;log-storage&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;emptyDir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;2hostdir本地数据卷&quot;&gt;2、HostDir（本地数据卷&lt;/h2&gt;
&lt;p&gt;　HostDir属性的volume使得对应的容器能够访问当前宿主机上的指定目录。例如，需要运行一个访问Docker系统目录的容器，那么就使用/var/lib/docker目录作为一个HostDir类型的volume；或者要在一个容器内部运行CAdvisor，那么就使用/dev/cgroups目录作为一个HostDir类型的volume。一旦这个pod离开了这个宿主机，HostDir中的数据虽然不会被永久删除，但数据也不会随pod迁移到其他宿主机上。因此，需要注意的是，由于各个宿主机上的文件系统结构和内容并不一定完全相同，所以相同pod的HostDir可能会在不同的宿主机上表现出不同的行为。yaml示例如下：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@k8s-master demon2]# cat &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;-hostpath.yaml 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Pod&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-hostpath&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-hostpath&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-hostpath&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;registry:5000/back_demon:1.0&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ssl-certs&lt;/span&gt;
         &lt;span class=&quot;s&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/home/laizy/test/cert&lt;/span&gt;
         &lt;span class=&quot;s&quot;&gt;readOnly&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/run.sh&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ssl-certs&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;hostPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/ssl/certs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&quot;3nfs网络数据卷&quot;&gt;3、NFS（网络数据卷）&lt;/h2&gt;

&lt;p&gt;NFS类型的volume。允许一块现有的网络硬盘在同一个pod内的容器间共享。yaml示例如下：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@k8s-master demon2]# cat &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;-nfspath.yaml 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Pod&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-nfspath&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-nfspath&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-nfspath&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;registry:5000/back_demon:1.0&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nfs-storage&lt;/span&gt;
         &lt;span class=&quot;s&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/home/laizy/test/&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/run.sh&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nfs-storage&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;nfs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;192.168.20.47&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/data/disk1&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&quot;4secret信息数据卷&quot;&gt;4、Secret（信息数据卷）&lt;/h2&gt;

&lt;p&gt;　Kubemetes提供了Secret来处理敏感数据，比如密码、Token和密钥，相比于直接将敏感数据配置在Pod的定义或者镜像中，Secret提供了更加安全的机制（Base64加密），防止数据泄露。Secret的创建是独立于Pod的，以数据卷的形式挂载到Pod中，Secret的数据将以文件的形式保存，容器通过读取文件可以获取需要的数据。yaml示例如下：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@k8s-master demon2]# cat secret.yaml 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Secret&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysecret&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Opaque&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;emhlbnl1&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eWFvZGlkaWFv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@k8s-master demon2]# cat &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;-secret.yaml 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Pod&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-secret&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-secret&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-secret&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;registry:5000/back_demon:1.0&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;secret&lt;/span&gt;
         &lt;span class=&quot;s&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/home/laizy/secret&lt;/span&gt;
         &lt;span class=&quot;s&quot;&gt;readOnly&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/run.sh&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;secret&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;secretName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysecret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>张建新</name></author><summary type="html">Kubernetes部分Volume类型介绍及yaml示例</summary></entry><entry><title type="html">Kubernetes 项目学习笔记。</title><link href="http://firsh.me/2017/06/21/kubernetes-1.6/" rel="alternate" type="text/html" title="Kubernetes 项目学习笔记。" /><published>2017-06-21T00:00:00+08:00</published><updated>2017-06-21T00:00:00+08:00</updated><id>http://firsh.me/2017/06/21/kubernetes-1.6</id><content type="html" xml:base="http://firsh.me/2017/06/21/kubernetes-1.6/">&lt;p&gt;这一篇学习笔记，记录了kubernetes 容器编排框架的实战，以及模拟线上负载均衡等功能。&lt;/p&gt;

&lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;kubernetes 是一个容器的编排引擎，目前最火的容器引擎Docker作为支撑。&lt;/li&gt;
  &lt;li&gt;kubernetes 开放RESTfull api共给调用，以及K8S-SDK-JAVA ，等调用方式，支持HELM包的方式进行部署。&lt;/li&gt;
  &lt;li&gt;剩下的正在完善，因为工作繁忙，我会慢慢补充。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;##架构图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/kubernetes1.6.jpg&quot; alt=&quot;请添加描述&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;高可用架构图&quot;&gt;高可用架构图&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/gaokeyong.png&quot; alt=&quot;请添加描述&quot; /&gt;&lt;/p&gt;</content><author><name>张建新</name></author><summary type="html">这一篇学习笔记，记录了kubernetes 容器编排框架的实战，以及模拟线上负载均衡等功能。</summary></entry><entry><title type="html">Javascript or nodejs 学习笔记。</title><link href="http://firsh.me/2017/06/21/javascript-leaning/" rel="alternate" type="text/html" title="Javascript or nodejs 学习笔记。" /><published>2017-06-21T00:00:00+08:00</published><updated>2017-06-21T00:00:00+08:00</updated><id>http://firsh.me/2017/06/21/javascript-leaning</id><content type="html" xml:base="http://firsh.me/2017/06/21/javascript-leaning/">&lt;p&gt;这一篇学习笔记，记录了今日所学的一些关于Javascript的高级用法。&lt;/p&gt;

&lt;h2 id=&quot;main&quot;&gt;Main&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;今天主要学习的是Javascript的原型，闭包，以及this指针。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;废话不多直接上代码；&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;javascript闭包&quot;&gt;Javascript闭包&lt;/h2&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * Created by zhangjianxin on 2017/6/21.
 */&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a_sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;cm&quot;&gt;/**此处a和b是一模一样的,b是从a拷贝了一份过去*/&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/**此处a加上了括号，于是c1的函数其实就是 a中return回来的函数（此函数可以调用a外面的变量tmp）*/&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/**为了证明a和b是同样的功能，且是复制了一份*/&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/**输出4*/&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/**输出5,——说明a并内存并未释放*/&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/**输出4——说明a和b是复制关系(两个独立的对象)，内存中互相独立*/&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/**另外一个例子***************************************************** * **/&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/**var objname = function(){...}和 function objname(){...}定义是一样的效果*/&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;javascript-this指针问题&quot;&gt;Javascript this指针问题&lt;/h2&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * Created by zhangjianxin on 2017/6/21.
 */&lt;/span&gt;



&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fuckthis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;asdasd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;func1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;func1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;func2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;func2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;func3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;func1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;fuckthis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;func3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;javascript原型&quot;&gt;Javascript原型&lt;/h2&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;cm&quot;&gt;/**
 * Created by zhangjianxin on 2017/6/21.
 */&lt;/span&gt;


&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;preson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;preson&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;preson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;preson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fuck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fuck prototype&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;preson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fuck2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fuck prototype 2222&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fuck2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>张建新</name></author><summary type="html">这一篇学习笔记，记录了今日所学的一些关于Javascript的高级用法。</summary></entry><entry><title type="html">Ngrok做内网穿透。</title><link href="http://firsh.me/2017/06/20/ngrok-docker/" rel="alternate" type="text/html" title="Ngrok做内网穿透。" /><published>2017-06-20T00:00:00+08:00</published><updated>2017-06-20T00:00:00+08:00</updated><id>http://firsh.me/2017/06/20/ngrok-docker</id><content type="html" xml:base="http://firsh.me/2017/06/20/ngrok-docker/">&lt;p&gt;Ngrok for Docker Server and client&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://microbadger.com/images/wernight/ngrok&quot; title=&quot;Get your own image badge on microbadger.com&quot;&gt;&lt;img src=&quot;https://images.microbadger.com/badges/image/wernight/ngrok.svg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://beta.codenvy.com/f?url=https://github.com/wernight/docker-ngrok&quot; title=&quot;Start development on Codenvy&quot;&gt;&lt;img src=&quot;http://beta.codenvy.com/factory/resources/codenvy-contribute.svg&quot; alt=&quot;Codenvy badge&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://www.docker.io/&quot;&gt;Docker&lt;/a&gt; image for &lt;a href=&quot;https://ngrok.com/&quot;&gt;ngrok&lt;/a&gt; v2, introspected tunnels to localhost.
It’s based on the excellent work of &lt;a href=&quot;https://registry.hub.docker.com/u/wizardapps/ngrok/&quot;&gt;wizardapps/ngrok&lt;/a&gt; and &lt;a href=&quot;https://registry.hub.docker.com/u/fnichol/ngrok/&quot;&gt;fnichol/ngrok&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Small&lt;/strong&gt;: Built using &lt;a href=&quot;https://registry.hub.docker.com/_/busybox&quot;&gt;busybox&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Simple&lt;/strong&gt;: Just link as &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;https&lt;/code&gt; in most cases, see below; exposes ngrok server &lt;code class=&quot;highlighter-rouge&quot;&gt;4040&lt;/code&gt; port.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Secure&lt;/strong&gt;: Runs as non-root user with a random UID &lt;code class=&quot;highlighter-rouge&quot;&gt;6737&lt;/code&gt; (to avoid mapping to an existing UID).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;configuration&quot;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;To see command-line options, run &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run --rm wernight/ngrok ngrok --help&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;Supposing you’ve an Apache or Nginx Docker container named &lt;code class=&quot;highlighter-rouge&quot;&gt;web_service_container&lt;/code&gt; listening on port 80:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run --rm -it --link web_service_container wernight/ngrok ngrok http web_service_container:80
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;environment-variables&quot;&gt;Environment variables&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Please consider using directly the command-line arguments of Ngrok.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you use the default &lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt; (i.e. don’t specify the ngrok command-line but only &lt;code class=&quot;highlighter-rouge&quot;&gt;wernight/ngrok&lt;/code&gt;),
then you can use instead envrionment variables magic below.&lt;/p&gt;

&lt;p&gt;You simply have to link the Ngrok container to the application under the &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;https&lt;/code&gt; aliases, and all of the configuration will be done for you by default.&lt;/p&gt;

&lt;p&gt;Additionally, you can specify one of several environment variable (via &lt;code class=&quot;highlighter-rouge&quot;&gt;-e&lt;/code&gt;) to configure your Ngrok tunnel:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NGROK_AUTH&lt;/code&gt; - Authentication key for your Ngrok account. This is needed for custom subdomains, custom domains, and HTTP authentication.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NGROK_SUBDOMAIN&lt;/code&gt; - Name of the custom subdomain to use for your tunnel. You must also provide the authentication token.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NGROK_HOSTNAME&lt;/code&gt; - Paying Ngrok customers can specify a custom domain. Only one subdomain or domain can be specified, with the domain taking priority.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NGROK_USERNAME&lt;/code&gt; - Username to use for HTTP authentication on the tunnel. You must also specify an authentication token.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NGROK_PASSWORD&lt;/code&gt; - Password to use for HTTP authentication on the tunnel. You must also specify an authentication token.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NGROK_PROTOCOL&lt;/code&gt; - Can either be &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;TCP&lt;/code&gt;, and it defaults to &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; if not specified. If set to &lt;code class=&quot;highlighter-rouge&quot;&gt;TCP&lt;/code&gt;, Ngrok will allocate a port instead of a subdomain and proxy TCP requests directly to your application.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NGROK_PORT&lt;/code&gt; - Port to expose (defaults to &lt;code class=&quot;highlighter-rouge&quot;&gt;80&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; protocol).&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;full-example&quot;&gt;Full example&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;We’ll set up a simple example HTTP server in a docker container named &lt;code class=&quot;highlighter-rouge&quot;&gt;www&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -v /usr/share/nginx/html --name www_data busybox true
$ docker run --rm --volumes-from www_data busybox /bin/sh -c 'echo &quot;&amp;lt;h1&amp;gt;Yo&amp;lt;/h1&amp;gt;&quot; &amp;gt; /usr/share/nginx/html/index.html'
$ docker run -d -p 80 --volumes-from www_data --name www nginx
$ curl $(docker port www 80)
&amp;lt;h1&amp;gt;Yo&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now we’ll link that HTTP server into an ngrok container to expose it on the internet:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -d -p 4040 --link www:http --name www_ngrok wernight/ngrok
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can now access the &lt;a href=&quot;https://ngrok.com/docs#client-api&quot;&gt;API&lt;/a&gt; to find the assigned domain:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl $(docker port www_ngrok 4040)/api/tunnels
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;or access the web UI to see requests and responses:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ xdg-open http://$(docker port www_ngrok 4040)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;helper&quot;&gt;Helper&lt;/h3&gt;

&lt;p&gt;For common cases you may want to create an alias in your &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.profile&lt;/code&gt; (or &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bashrc&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.zshrc&lt;/code&gt;, or equivalent):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function docker-ngrok() {
  docker run --rm -it --link &quot;$1&quot;:http wernight/ngrok ngrok http http:80
}
# For ZSH with Oh-My-Zsh! and 'docker' plugin enabled, you can also enable auto-completion:
#compdef __docker_containers docker-ngrok
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then to the simple example just do &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-ngrok web_service_container&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;feedbacks&quot;&gt;Feedbacks&lt;/h2&gt;

&lt;p&gt;Report issues/questions/feature requests on &lt;a href=&quot;https://github.com/wernight/docker-ngrok/issues&quot;&gt;GitHub Issues&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pull requests are very welcome!&lt;/p&gt;</content><author><name>张建新</name></author><summary type="html">Ngrok for Docker Server and client</summary></entry><entry><title type="html">面试题 java Development。</title><link href="http://firsh.me/2017/06/19/mianshi-Java-development/" rel="alternate" type="text/html" title="面试题 java Development。" /><published>2017-06-19T00:00:00+08:00</published><updated>2017-06-19T00:00:00+08:00</updated><id>http://firsh.me/2017/06/19/mianshi-Java-development</id><content type="html" xml:base="http://firsh.me/2017/06/19/mianshi-Java-development/">&lt;h2 id=&quot;说明&quot;&gt;说明&lt;/h2&gt;

&lt;p&gt;这篇文章翻译自一位外国友人的关于面试后端程序员的文章，我比较喜爱这篇文章。一是因为它极大的拓宽了我的视角，另一方面是其中的一些问题非常具有启发性。不仅对于面试者，对于面试官来说也是个不错的参考。于是迫不及待的翻译了一下，给各位看官做个参考。&lt;/p&gt;

&lt;p&gt;这篇文章中，许多问题我并没有完全理解，所以翻译可能存在不准确的地方。如果有读者发现有一些翻译有误或者不好的地方，请不吝赐教。&lt;/p&gt;

&lt;p&gt;原文参见 &lt;a href=&quot;https://github.com/arialdomartini&quot;&gt;@arialdomartini&lt;/a&gt;的: &lt;a href=&quot;https://github.com/arialdomartini/Back-End-Developer-Interview-Questions&quot;&gt;Back-End Developer Interview Questions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以下是原文翻译。&lt;/p&gt;

&lt;h1 id=&quot;后端开发面试题&quot;&gt;后端开发面试题&lt;/h1&gt;

&lt;p&gt;在面试的时候，我并不特别喜欢问一些技术性的问题。我更喜欢的方式是这样的: 和面试者坐在一起，看一些实际的代码，解决一些实际的问题。并且用一整天的时间，让团队所有成员轮流和面试者进行结对编程。虽然如此，但是一些技术问题仍然可以用来很好地启动一段有深度的谈话，能够让面试者和面试官相互都有更加深入的了解。&lt;/p&gt;

&lt;p&gt;这个仓库包含了可以用来考核面试者的一系列后端面试题。但绝不是说，面试官必须用每个面试题来考核面试者（这样可能要耗费好几个小时）。根据你期望面试者拥有的技能，从这个列表中有选择的挑一些题目，可以帮助你在特定技能上考核面试者。&lt;/p&gt;

&lt;p&gt;应当承认的是，这个项目的灵感来自于&lt;a href=&quot;https://github.com/darcyclarke&quot;&gt;@darcyclarke&lt;/a&gt;的文章&lt;a href=&quot;https://github.com/darcyclarke/Front-end-Developer-Interview-Questions&quot;&gt;Front-end Job Interview Questions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt; 请记住，这些面试题中有许多问题是开放式的，能引导讨论一些有趣的问题。相比那些有直接答案的问题来说，这种问题能够让你对面试者的能力有更多的了解。再一次强调，我认为仅仅是问问题是不够的。要通过与面试者较长时间的结对编程来完成面试: 这是你们相互了解对方的风格和方法、让面试者了解未来工作的最佳手段之一。&lt;/p&gt;

&lt;h2 id=&quot;目录&quot;&gt;&lt;a name=&quot;toc&quot;&gt;目录&lt;/a&gt;&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#general&quot;&gt;通用问题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#open&quot;&gt;开放式问题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#patterns&quot;&gt;设计模式相关问题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#design&quot;&gt;代码设计相关问题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#languages&quot;&gt;语言相关问题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#web&quot;&gt;Web相关问题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#databases&quot;&gt;数据库相关问题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#nosql&quot;&gt;非关系型数据库相关问题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#codeversioning&quot;&gt;代码版本管理相关问题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#concurrency&quot;&gt;并发问题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#distributed&quot;&gt;分布式系统相关问题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#management&quot;&gt;软件生命周期和团队管理相关问题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#algorithms&quot;&gt;逻辑和算法相关问题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#architecture&quot;&gt;软件架构相关问题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#soa&quot;&gt;面向服务架构(SOA)和微服务(Microservice)相关问题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#security&quot;&gt;安全相关问题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#billgates&quot;&gt;比尔盖茨式问题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#snippets&quot;&gt;代码示例问题&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;####&lt;a href=&quot;#toc&quot;&gt;[↑]&lt;/a&gt; &lt;a name=&quot;general&quot;&gt;通用问题:&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;语言设计中空引用(&lt;a href=&quot;http://programmers.stackexchange.com/questions/12777/are-null-references-really-a-bad-thing&quot;&gt;null reference&lt;/a&gt;)的存在有什么问题？假设你想要将空引用的概念从你的首选语言中移除，可能导致什么结果？&lt;/li&gt;
  &lt;li&gt;为什么函数式编程重要？什么时候适用函数式语言？&lt;/li&gt;
  &lt;li&gt;设计(design)、架构(architecture)、功能(functionality)和美学(aesthetic)之间有什么区别？讨论一下。&lt;/li&gt;
  &lt;li&gt;微软、谷歌、欧朋(opera)和火狐这类公司是如何从他们的浏览器中获利的？&lt;/li&gt;
  &lt;li&gt;为什么打开TCP套接字有很大的开销？&lt;/li&gt;
  &lt;li&gt;封装的重要性体现在哪儿？&lt;/li&gt;
  &lt;li&gt;什么是实时系统？它与普通系统有什么区别？&lt;/li&gt;
  &lt;li&gt;实时语言(real-time language)和堆内存分配(heap memory allocation)之间的关系是什么？&lt;/li&gt;
  &lt;li&gt;不变性(Immutability)是指: (变量的)值只能在创建的时候被设置一次，之后就不能被改变。为什么不变性对写更加安全的代码有帮助？&lt;/li&gt;
  &lt;li&gt;可变值(mutable values)和不可变值(immutable values)有哪些优缺点？&lt;/li&gt;
  &lt;li&gt;什么是O/R阻抗失衡(Object-Relational impedence mismatch)？&lt;/li&gt;
  &lt;li&gt;如果你需要使用缓存，你使用哪些原则来确定缓存的大小？&lt;/li&gt;
  &lt;li&gt;TCP和HTTP有什么区别？&lt;/li&gt;
  &lt;li&gt;在客户端渲染(client-side rendering)和服务端渲染(server-side rendering)之间，你是如何权衡的？&lt;/li&gt;
  &lt;li&gt;如何在一个不可靠的协议之上构建一个可靠的通信协议？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;####&lt;a href=&quot;#toc&quot;&gt;[↑]&lt;/a&gt; &lt;a name=&quot;open&quot;&gt;开放式问题:&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;为什么人们会抵制变化？&lt;/li&gt;
  &lt;li&gt;如何向你的祖母解释什么是线程？&lt;/li&gt;
  &lt;li&gt;作为一个软件工程师，你想要既要有创新力，又要产出具有可预测性。采用什么策略才能使这两个目标可以共存呢？&lt;/li&gt;
  &lt;li&gt;什么是好的代码？&lt;/li&gt;
  &lt;li&gt;解释什么是流(Streaming)和如何实现一个流？&lt;/li&gt;
  &lt;li&gt;假设你的公司给你一周的时间，用来改善你和同事的生活: 你将如何使用这一周？&lt;/li&gt;
  &lt;li&gt;本周你学了什么？&lt;/li&gt;
  &lt;li&gt;所有的设计中都会有美学元素(aesthetic element)的存在。问题是，你认为美学元素是你的朋友还是敌人？&lt;/li&gt;
  &lt;li&gt;列出最近你读过的5本书。&lt;/li&gt;
  &lt;li&gt;假设目前有个大型公司（非常有钱），他们的开发流程是瀑布式流程（Waterfall），如果需要你在他们公司引入持续交付（&lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_delivery&quot;&gt;Continue Devivery&lt;/a&gt;），你会怎么做？&lt;/li&gt;
  &lt;li&gt;我们来谈谈”&lt;em&gt;重复造轮子&lt;/em&gt;”,”&lt;em&gt;非我发明症&lt;/em&gt;”, “&lt;em&gt;吃自己做出来的狗粮&lt;/em&gt;“的这些做法吧。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(注: 重复造轮子: Reinventing the wheel; 非我发明症:Not Invented Here Syndrome; 吃自己做出来的狗粮: Eating Your Own Dog Food)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在你当前的工作流中，什么事情是你计划下一步需要自动化的？&lt;/li&gt;
  &lt;li&gt;为什么写软件是困难的？是什么使软件的维护变得困难？&lt;/li&gt;
  &lt;li&gt;你更喜欢在全新项目（Green Field Project）上工作还是在已有项目(Brown Field Project)基础上工作？为什么？&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/alex/what-happens-when&quot;&gt;当你在浏览器地址栏输入google.com回车之后都发生了什么?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;当操作系统CPU处于空闲的时候，它可能在处理哪些事情？&lt;/li&gt;
  &lt;li&gt;如何向一个5岁的孩子解释什么是Unicode/数据库事务？&lt;/li&gt;
  &lt;li&gt;如何维护单体架构(monolithic architecture)？&lt;/li&gt;
  &lt;li&gt;一个”专业的开发者”意味着什么？&lt;/li&gt;
  &lt;li&gt;软件开发是艺术、是技艺还是工程？你的观点是什么？&lt;/li&gt;
  &lt;li&gt;“喜欢这个的人也喜欢…“，如何在一个电子商务商店里实现这种功能？&lt;/li&gt;
  &lt;li&gt;为什么在创新上，企业会比创业公司慢些？&lt;/li&gt;
  &lt;li&gt;为什么说，你不应该尝试应用自己发明或者设计的密码学？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;####&lt;a href=&quot;#toc&quot;&gt;[↑]&lt;/a&gt; &lt;a name=&quot;patterns&quot;&gt;设计模式相关问题:&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;请用一个例子表明，全局对象是邪恶的存在。&lt;/li&gt;
  &lt;li&gt;假设你工作的系统不支持事务性，你会如何从头开始实现它？&lt;/li&gt;
  &lt;li&gt;什么是好莱坞原则（Hollywood Principles）？&lt;/li&gt;
  &lt;li&gt;关于迪米特法则(最少知识原则): 写一段代码违反它, 然后修复它。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;（注: 迪米特法则：the Law of Demeter, 最少知识原则： the Principle of Least Knowledge）&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Active-Record模式有什么限制和缺陷？&lt;/li&gt;
  &lt;li&gt;Data-Mapper模式和Active-Record模式有什么区别？&lt;/li&gt;
  &lt;li&gt;空对象模式(Null Object Pattern)的目的是什么？&lt;/li&gt;
  &lt;li&gt;为什么组合(Composition)比继承(Inheritance)更好？&lt;/li&gt;
  &lt;li&gt;什么是反腐败层(Anti-corruption Layer)?&lt;/li&gt;
  &lt;li&gt;你可以写一个线程安全的单例(Singleton)类吗？&lt;/li&gt;
  &lt;li&gt;数据抽象(Data Abstraction)能力是指能改变实现而不影响客户端的这种能力。请构造一个一个例子，违反这个特性，并且尝试修复它。&lt;/li&gt;
  &lt;li&gt;你是如何处理依赖关系地狱(Dependency Hell)的？&lt;/li&gt;
  &lt;li&gt;为什么说goto语句是恶魔般的存在？&lt;/li&gt;
  &lt;li&gt;健壮性是进行软件设计时的一个通用原则，它建议 &lt;em&gt;“发送时要保守，接收时要开放”&lt;/em&gt;。这也经常被写成，“做一个有耐心的读者，做一个谨慎的作者”。你能解释一些这背后的逻辑吗？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;译者注： “发送时要保守，接收时要开发”的原文是： “Be conservative in what you send, be liberal in what you accept”，有点类似于“严于律己，宽于待人”的意味。&lt;/p&gt;

&lt;p&gt;####&lt;a href=&quot;#toc&quot;&gt;[↑]&lt;/a&gt; &lt;a name=&quot;design&quot;&gt;代码设计相关问题:&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;你在进行软件设计时会考虑软件测试吗？软件测试是如何影响软件设计的？&lt;/li&gt;
  &lt;li&gt;内聚和耦合的区别是什么？&lt;/li&gt;
  &lt;li&gt;重构在哪些场景下有用？&lt;/li&gt;
  &lt;li&gt;代码中的注释有用吗？&lt;/li&gt;
  &lt;li&gt;设计和架构有什么区别？&lt;/li&gt;
  &lt;li&gt;为什么在测试驱动开发(TDD)中是先写测试，再写代码？&lt;/li&gt;
  &lt;li&gt;C++支持多继承，Java允许类实现多个接口。这些特性对正交性有什么影响？使用多继承和使用多接口有区别吗？[这个问题来自Andrew .Hunt 和 David Thomas写的《程序员修炼之道》]&lt;/li&gt;
  &lt;li&gt;在存储过程（Stored Procedures）中写业务逻辑有什么优缺点？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;####&lt;a href=&quot;#toc&quot;&gt;[↑]&lt;/a&gt; &lt;a name=&quot;languages&quot;&gt;语言相关问题:&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;告诉我你的首选语言的三个最坏的缺陷。&lt;/li&gt;
  &lt;li&gt;为什么现在函数式编程这么越来越受关注？&lt;/li&gt;
  &lt;li&gt;闭包是什么？它有什么用途？闭包和类有什么共同点？&lt;/li&gt;
  &lt;li&gt;泛型有什么用途？&lt;/li&gt;
  &lt;li&gt;什么是高阶函数？有什么用途？用你的首选语言写个例子出来。&lt;/li&gt;
  &lt;li&gt;讨论一下，如何写一个循环，然后把它转换成递归函数，要避免易变性。&lt;/li&gt;
  &lt;li&gt;有些语言将函数视为第一公民，这是什么意思？&lt;/li&gt;
  &lt;li&gt;用一个例子说明匿名函数是有用的。&lt;/li&gt;
  &lt;li&gt;什么是动态方法调度(Dynamic Method Dispatch)？&lt;/li&gt;
  &lt;li&gt;名字空间(Namespace)有什么用？有什么可以替代它的吗？&lt;/li&gt;
  &lt;li&gt;谈谈Java和C#之间的互操作性(Interoperability) (任选其他两门语言都行)&lt;/li&gt;
  &lt;li&gt;为什么很多软件工程师不喜欢Java？&lt;/li&gt;
  &lt;li&gt;你认为好的语言好在哪里？差的语言差在哪里？&lt;/li&gt;
  &lt;li&gt;写两个函数，一个是”引用透明的(Referentially Transparent)”，另一个是”引用不透明的(Referentially Opaque)”。讨论之。&lt;/li&gt;
  &lt;li&gt;什么是栈？什么是堆？&lt;/li&gt;
  &lt;li&gt;为什么一个语言中，”函数是第一公民”是很重要的？&lt;/li&gt;
  &lt;li&gt;模式匹配(Pattern Matching)和Switch语句(Switch clauses)的区别在哪儿？&lt;/li&gt;
  &lt;li&gt;为什么有些语言设计上没有异常机制？这有什么优缺点？&lt;/li&gt;
  &lt;li&gt;如果&lt;code class=&quot;highlighter-rouge&quot;&gt;Cat&lt;/code&gt;是一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt;, 那么&lt;code class=&quot;highlighter-rouge&quot;&gt;TaskCare&amp;lt;Cat&amp;gt;&lt;/code&gt;是一个&lt;code class=&quot;highlighter-rouge&quot;&gt;TakeCare&amp;lt;Animal&amp;gt;&lt;/code&gt;吗？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;####&lt;a href=&quot;#toc&quot;&gt;[↑]&lt;/a&gt; &lt;a name=&quot;web&quot;&gt;web相关问题:&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;为什么”第一方cookie(first-party cookie)”和”第三方cookie(third-party cookie)”被如此不同的对待？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;####&lt;a href=&quot;#toc&quot;&gt;[↑]&lt;/a&gt; &lt;a name=&quot;databases&quot;&gt;数据库相关问题:&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果要你将一个项目从MySQL迁移至PostgreSQL中，你会如何迁移？&lt;/li&gt;
  &lt;li&gt;为什么&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT * FROM table WHERE field = null&lt;/code&gt;不能匹配空的字段？&lt;/li&gt;
  &lt;li&gt;什么是ACID(原子性，一致性，隔离性，持久性)原则？&lt;/li&gt;
  &lt;li&gt;你是如何进行数据库模式(Database schema)迁移的？&lt;/li&gt;
  &lt;li&gt;延迟加载(lazy loading)是如何实现的？什么场景下有用？他有什么缺陷？&lt;/li&gt;
  &lt;li&gt;什么是N+1问题？&lt;/li&gt;
  &lt;li&gt;如何找出应用中开销最大的查询？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;####&lt;a href=&quot;#toc&quot;&gt;[↑]&lt;/a&gt; &lt;a name=&quot;nosql&quot;&gt;非关系型数据库相关问题:&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;什么是最终一致性(Eventual Consistency)？&lt;/li&gt;
  &lt;li&gt;关于CAP理论，举一些CP、AP、CA系统的例子。&lt;/li&gt;
  &lt;li&gt;NoSQL是如何解决可伸缩性的挑战的？&lt;/li&gt;
  &lt;li&gt;什么情况下你会使用类似于MongoDB的文档数据库而不是关系型数据库（如Mysql或者PostgreSQL）？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;####&lt;a href=&quot;#toc&quot;&gt;[↑]&lt;/a&gt; &lt;a name=&quot;codeversioning&quot;&gt;代码版本管理相关问题:&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;为什么在Mercurial或者git中(管理)分支比SVN容易？&lt;/li&gt;
  &lt;li&gt;分散式版本控制系统（比如git），相比集中式版本控制系统（如svn）有哪些优势和劣势？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(注:集中式版本控制系统: Centralized Version Control Systems；分散式版本控制系统: Distributed Version Control Systems)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;能描述一下什么是GitHubFlow和GitFlow工作流吗？&lt;/li&gt;
  &lt;li&gt;什么是rebase？&lt;/li&gt;
  &lt;li&gt;为什么合并操作(merge)在Mercurial和git中比在SVN和CVS中容易？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;####&lt;a href=&quot;#toc&quot;&gt;[↑]&lt;/a&gt; &lt;a name=&quot;concurrency&quot;&gt;并发问题:&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;为什么我们需要并发呢？解释一下。&lt;/li&gt;
  &lt;li&gt;为什么测试多线程/并发代码这么困难？&lt;/li&gt;
  &lt;li&gt;什么是竞争条件（Race Condition）？用任何一个语言写一个例子。&lt;/li&gt;
  &lt;li&gt;什么是死锁？用代码解释一下。&lt;/li&gt;
  &lt;li&gt;什么是饿死？&lt;/li&gt;
  &lt;li&gt;什么是Wait-Free算法？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;####&lt;a href=&quot;#toc&quot;&gt;[↑]&lt;/a&gt; &lt;a name=&quot;distributed&quot;&gt;分布式系统相关问题:&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;怎么测试一个分布式系统？&lt;/li&gt;
  &lt;li&gt;什么场景下你会在两个系统中采用异步通信机制？&lt;/li&gt;
  &lt;li&gt;远程过程调用的通用缺点是什么？&lt;/li&gt;
  &lt;li&gt;如果你为了可扩展性和鲁棒性而构建一个分布式的系统，分别在封闭安全的网络环境情况下，和地理上的位置不同但是网络环境不是封闭和安全的情况下，你会考虑什么不同的事情？&lt;/li&gt;
  &lt;li&gt;在Web应用中如何管理容错性？在桌面端呢？&lt;/li&gt;
  &lt;li&gt;在分布式系统中，如何处理故障？&lt;/li&gt;
  &lt;li&gt;让我们来谈谈网络分裂(network partitions)后有的几种恢复的手段吧。&lt;/li&gt;
  &lt;li&gt;你认为分布式计算中有哪些谬论？&lt;/li&gt;
  &lt;li&gt;你在什么时候会使用Request/Response模式，什么时候使用Publish/Subscribe模式？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;####&lt;a href=&quot;#toc&quot;&gt;[↑]&lt;/a&gt; &lt;a name=&quot;management&quot;&gt;软件生命周期和团队管理相关问题:&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;什么是敏捷（Agility）？&lt;/li&gt;
  &lt;li&gt;你是如何处理遗留代码（Legacy Code）的？&lt;/li&gt;
  &lt;li&gt;假设我是你们公司的CEO，请向我解释什么是看板，并且说服我在它上面投资。&lt;/li&gt;
  &lt;li&gt;敏捷（Agility）和瀑布（Waterfall）之间的最大区别是什么？&lt;/li&gt;
  &lt;li&gt;作为团队管理者，你对会议太多这个问题是如何处理的？&lt;/li&gt;
  &lt;li&gt;你会如何处理延期很长时间了的项目？&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“&lt;em&gt;个体与交互重于过程和工具&lt;/em&gt;“和”&lt;em&gt;客户协作重于合同谈判&lt;/em&gt;“占了敏捷宣言（Agile Manifesto）的一半，谈论一下这两个观念。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;如果你是你们公司的CTO，你会采取什么样的决策？&lt;/li&gt;
  &lt;li&gt;你觉得项目经理有用吗？&lt;/li&gt;
  &lt;li&gt;如果要你组织一个弹性工作制的开发团队（即没有强制工作时间的要求），并且假期制度是”按需休假”，你会如何做？&lt;/li&gt;
  &lt;li&gt;你会如何管理一个人员流动非常高的团队？如何在不加薪的条件下说服团队成员不要离开？&lt;/li&gt;
  &lt;li&gt;除了代码之外，你最关注你的同事的哪3项素质？&lt;/li&gt;
  &lt;li&gt;关于代码，你最希望非技术人员能知道的的三件事是什么？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;####&lt;a href=&quot;#toc&quot;&gt;[↑]&lt;/a&gt; &lt;a name=&quot;algorithms&quot;&gt;逻辑和算法相关问题:&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;只用LIFO栈如何构造一个FIFO队列？只用FIFO队列如何构造一个LIFO栈？&lt;/li&gt;
  &lt;li&gt;写一段有栈溢出的代码。&lt;/li&gt;
  &lt;li&gt;写一个尾递归版本的阶乘函数。&lt;/li&gt;
  &lt;li&gt;使用任何一个语言，写一个REPL，功能是echo你输入的字符串。然后将它演化成一个逆波兰表达式的计算器。&lt;/li&gt;
  &lt;li&gt;如果需要你设计一个文件系统磁盘碎片整理程序，你会如何设计？&lt;/li&gt;
  &lt;li&gt;写一个生成随机迷宫的程序。&lt;/li&gt;
  &lt;li&gt;写一段有内存泄漏的示例代码。&lt;/li&gt;
  &lt;li&gt;随机生成一个的数字序列，里面每个数字都不同。&lt;/li&gt;
  &lt;li&gt;写一个简单的垃圾回收系统。&lt;/li&gt;
  &lt;li&gt;使用任何一门语言，写一个基本的消息代理。&lt;/li&gt;
  &lt;li&gt;写一个基础的web服务器，然后画一张线路图，展示你将来还想要实现的功能。&lt;/li&gt;
  &lt;li&gt;如何对一个10GB的文件进行排序？如果是10TB的数据，你会采用什么方法？&lt;/li&gt;
  &lt;li&gt;请实现&lt;code class=&quot;highlighter-rouge&quot;&gt;rnd()&lt;/code&gt;函数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;####&lt;a href=&quot;#toc&quot;&gt;[↑]&lt;/a&gt; &lt;a name=&quot;architecture&quot;&gt;软件架构相关问题:&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;什么情况下缓存是没用的，甚至是危险的？&lt;/li&gt;
  &lt;li&gt;为什么事件驱动的架构能提高可扩展性(scalability)？&lt;/li&gt;
  &lt;li&gt;什么样的代码是可读性强的代码？&lt;/li&gt;
  &lt;li&gt;紧急设计(Emergent Design)和演化架构(Evolutionary Architecture)之间的区别是什么？&lt;/li&gt;
  &lt;li&gt;横向扩展(scale out) vs 纵向扩展(scale up): 有什么区别？分别在什么场景下使用？&lt;/li&gt;
  &lt;li&gt;分布式系统中如何处理”故障切换(failover)”和”用户会话(user session)”？&lt;/li&gt;
  &lt;li&gt;什么是CQRS(Command Query Responsibility Segregation)?他和最早的Command-Query Separation原则有什么区别？&lt;/li&gt;
  &lt;li&gt;什么是三层架构？&lt;/li&gt;
  &lt;li&gt;如何设计一个可扩展性高的系统？&lt;/li&gt;
  &lt;li&gt;处理C10k问题的策略有哪些？&lt;/li&gt;
  &lt;li&gt;如果让你来设计一个去中心化的P2P系统，你会如何设计？&lt;/li&gt;
  &lt;li&gt;为什么CGI的扩展性不好？&lt;/li&gt;
  &lt;li&gt;在设计系统时，你如何防止供应商依赖(&lt;a href=&quot;https://sourcemaking.com/antipatterns/vendor-lock-in&quot;&gt;Vendor Lock-in&lt;/a&gt;)？&lt;/li&gt;
  &lt;li&gt;在可扩展性上，发布/订阅(Publish-Subscribe)模式有什么缺点？&lt;/li&gt;
  &lt;li&gt;80年代以后，CPU有哪些变化？这些变化，对编程产生了什么影响？&lt;/li&gt;
  &lt;li&gt;性能生命周期(performace lifecycle)中，你认为哪个部分是需要考虑进去的？ 如何管理？&lt;/li&gt;
  &lt;li&gt;除了恶意攻击造成的拒绝服务现象以外，哪些设计或者架构上的问题会导致拒绝服务？&lt;/li&gt;
  &lt;li&gt;性能和可扩展性之间有什么关系？&lt;/li&gt;
  &lt;li&gt;什么时候紧耦合是OK的？&lt;/li&gt;
  &lt;li&gt;一个系统要有什么特征才能适配云计算环境(Cloud Ready)？&lt;/li&gt;
  &lt;li&gt;Does unity of design imply an aristocracy of architects?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;####&lt;a href=&quot;#toc&quot;&gt;[↑]&lt;/a&gt; &lt;a name=&quot;soa&quot;&gt;面向服务架构(SOA)和微服务(Microservice)相关问题:&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在SOA中，为什么长期存活的事务(Long-lived transation)不被看好，而Saga却被看好？&lt;/li&gt;
  &lt;li&gt;SOA和MicroService之间有什么区别？&lt;/li&gt;
  &lt;li&gt;我们来谈谈Web服务的版本管理、版本兼容性、重大变更管理这些事情吧.&lt;/li&gt;
  &lt;li&gt;在saga中事务和补偿操作(compensation operation)之间的区别是什么？在SOA中呢？&lt;/li&gt;
  &lt;li&gt;微服务不能做得太”微”，你认为什么时候微服务太”微”了？&lt;/li&gt;
  &lt;li&gt;MicroService架构的优劣是什么？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;####&lt;a href=&quot;#toc&quot;&gt;[↑]&lt;/a&gt; &lt;a name=&quot;security&quot;&gt;安全相关问题:&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;什么是双因素认证(Two Factor Authentication)？在一个已有的Web应用中，你如何实现这种机制？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;####&lt;a href=&quot;#toc&quot;&gt;[↑]&lt;/a&gt; &lt;a name=&quot;billgates&quot;&gt;比尔盖茨式问题:&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果你把一面镜子放在扫描仪上，会发生什么？&lt;/li&gt;
  &lt;li&gt;假设有一个和你完全一样的克隆人，而他是你的上司，你愿意和他工作吗？&lt;/li&gt;
  &lt;li&gt;现在请你面试一下我。&lt;/li&gt;
  &lt;li&gt;为什么Quora上的回答会比Yahoo Answer上的回答好？&lt;/li&gt;
  &lt;li&gt;对手是现代语言，你的任务是要为Cobol辩护，你会如何进行？&lt;/li&gt;
  &lt;li&gt;10年后的你是什么样子？&lt;/li&gt;
  &lt;li&gt;假设你是我老板，我被解雇了。你会如何通知我？&lt;/li&gt;
  &lt;li&gt;我想要重构一个系统，而你想要从头重写。我们来争论一下该怎么弄吧。然后我们反转角色，再争论一下。&lt;/li&gt;
  &lt;li&gt;老板要你对公司撒谎，你的反应是什么？&lt;/li&gt;
  &lt;li&gt;如果你可以穿越到以前，你会给年轻时候的你什么建议？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;####&lt;a href=&quot;#toc&quot;&gt;[↑]&lt;/a&gt; &lt;a name=&quot;snippets&quot;&gt;代码示例问题:&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;这段Javascript函数的输出是什么？&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hookupevents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;关于类型擦除(Type Erasure)，这段Java代码的输出是什么？为什么？&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// evaluates to true&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Equal&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;你能指出哪儿有内存泄漏吗？&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEFAULT_INITIAL_CAPACITY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEFAULT_INITIAL_CAPACITY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ensureCapacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EmptyStackException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Ensure space for at least one more element, roughly
     * doubling the capacity each time the array needs to grow.
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ensureCapacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;copyOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;语句，或者更加通用点，条件表达式通常是过程式编程/命令式编程的形式。你能去掉这段代码中的&lt;code class=&quot;highlighter-rouge&quot;&gt;switch&lt;/code&gt;语句，用面向对象的方式来修改这段代码吗？&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Formatter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Formatter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doTheJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theInput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;askForPermission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;FAIL&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;OK&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s%s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theInput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theInput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;你能去掉这里的&lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;语句，将它改成更加面向对象吗？&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TheService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FooRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fooRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TheService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FooRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fooRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fileHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fooRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fooRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rewrittenUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getXmlFileFromFileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;executionId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getExecutionIdFromFileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;executionId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rewrittenUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;knownFoo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fooRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFooByXmlFileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rewrittenUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;knownFoo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;knownFoo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DoThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;如何重构这段代码？&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;HRESULT&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;S_OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SUCCEEDED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Operation1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SUCCEEDED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Operation2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SUCCEEDED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Operation3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SUCCEEDED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Operation4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OPERATION4FAILED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OPERATION3FAILED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OPERATION2FAILED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OPERATION1FAILED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>张建新</name></author><summary type="html">说明</summary></entry><entry><title type="html">nodejs + npm 版本切换(Mac/Windows/Linux)</title><link href="http://firsh.me/2017/06/15/npm-node-version-q/" rel="alternate" type="text/html" title="nodejs + npm 版本切换(Mac/Windows/Linux)" /><published>2017-06-15T00:00:00+08:00</published><updated>2017-06-15T00:00:00+08:00</updated><id>http://firsh.me/2017/06/15/npm-node-version-q</id><content type="html" xml:base="http://firsh.me/2017/06/15/npm-node-version-q/">&lt;p&gt;因项目需求需要多次切换npm以及nodejs，所写出这个文章以供参考。&lt;/p&gt;

&lt;h1 id=&quot;使用npm-n进行版本切换对nodejs的版本控制&quot;&gt;使用npm n进行版本切换，对nodejs的版本控制。&lt;/h1&gt;

&lt;h2 id=&quot;安装n控制器&quot;&gt;安装N控制器。&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo npm install -g n
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&quot;安装nodejs的最新版本&quot;&gt;安装nodejs的最新版本&lt;/h2&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
$ n 5.4.1  --&amp;gt;（安装node.js 5.4.1版本）

$ n latest  --&amp;gt;（安装node.js最新版本）

$ n stable   --&amp;gt;（安装node.js稳定版本）

$ n rm 4.0.0   --&amp;gt;（删除某个版本）

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&quot;如图&quot;&gt;如图&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/QQ20170615-215055@2x.png&quot; alt=&quot;此处输入图片的描述&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
$ sudo n （用上下选择版本会车切换版本）

#以笔者装的为例，输入以上代码后会出现
    node/4.4.7
    node/6.5.0

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/QQ20170615-214859@2x.png&quot; alt=&quot;此处输入图片的描述&quot; /&gt;&lt;/p&gt;</content><author><name>张建新</name></author><summary type="html">因项目需求需要多次切换npm以及nodejs，所写出这个文章以供参考。</summary></entry><entry><title type="html">使用travis-ci 来持续集成jekyll静态博客。</title><link href="http://firsh.me/2017/06/13/travis-ci-myblog/" rel="alternate" type="text/html" title="使用travis-ci 来持续集成jekyll静态博客。" /><published>2017-06-13T00:00:00+08:00</published><updated>2017-06-13T00:00:00+08:00</updated><id>http://firsh.me/2017/06/13/travis-ci-myblog</id><content type="html" xml:base="http://firsh.me/2017/06/13/travis-ci-myblog/">&lt;p&gt;CICD (travis) for my blog&lt;/p&gt;

&lt;h1 id=&quot;使用travis-ci-来持续集成jekyll静态博客&quot;&gt;使用travis-ci 来持续集成jekyll静态博客.&lt;/h1&gt;

&lt;p&gt;##简介
Travis CI提供一个在线的持续集成服务，用来构建托管在github上的代码。
许多知名的开源项目使用它来自动构建测试代码,它支持hexo的运行环境node.js。
原理很简单，Travis会在你每一次在github上提交代码后，生成一个Linux虚拟机来运行你配置好的任务,
生成和部署hexo只需要一个命令 hexo gd ，但是Travis CI需要有我们的github项目上传代码的权限，
所以我们需要使用SSH key来使Travis CI拥有权限。还有一些其他的问题也都参开hexo作者的博文解决了，
用Travis CI自动部署网站到Github。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#安装travis-ci的命令行工具&lt;/span&gt;

gem install travis

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#登录Travis CI&lt;/span&gt;
travis login --auto &lt;span class=&quot;c&quot;&gt;#这里可以用token登录。&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#使用travis命令行工具加密私钥&lt;/span&gt;
travis encrypt-file id_rsa --add
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#travis CI解密配置,这部分内容需要配置在 .travis.yml 里,注意修改秘钥&lt;/span&gt;

- openssl aes-256-cbc -K &lt;span class=&quot;nv&quot;&gt;$encrypted_26b4962af0e7_key&lt;/span&gt; -iv &lt;span class=&quot;nv&quot;&gt;$encrypted_26b4962af0e7_iv&lt;/span&gt;
  -in id_rsa.enc -out ~/.ssh/id_rsa -d
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;.travis.yml&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;s&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;node_js&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;node_js&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;4.1'&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;before_install&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;openssl aes-256-cbc -K $encrypted_26b4962af0e7_key -iv $encrypted_26b4962af0e7_iv&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;-in id_rsa.enc -out ~/.ssh/id_rsa -d&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;chmod 600 ~/.ssh/id_rsa&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eval $(ssh-agent)&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ssh-add ~/.ssh/id_rsa&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cp ssh_config ~/.ssh/config&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;git config --global user.name &quot;pangjian&quot;&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;git config --global user.email &quot;pangjian1010@gmail.com&quot;&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;npm install hexo-cli -g&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;npm install&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hexo -version&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hexo clean&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hexo g&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hexo deploy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;转载请注明出处：https://firsh.me/2017/06/13/travis-ci-myblog/&lt;/li&gt;
&lt;/ul&gt;</content><author><name>张建新</name></author><summary type="html">CICD (travis) for my blog</summary></entry></feed>