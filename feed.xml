<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://firsh.me/feed.xml" rel="self" type="application/atom+xml" /><link href="http://firsh.me/" rel="alternate" type="text/html" /><updated>2017-06-09T17:08:15+08:00</updated><id>http://firsh.me/</id><title type="html">会飞的胖子。</title><subtitle>张建新个人博客</subtitle><author><name>飞鱼</name></author><entry><title type="html">jenkins + docker + git 持续集成</title><link href="http://firsh.me/2017/06/06/Jenkins-docker-kubectl-same-master/" rel="alternate" type="text/html" title="jenkins + docker + git 持续集成" /><published>2017-06-06T00:00:00+08:00</published><updated>2017-06-06T00:00:00+08:00</updated><id>http://firsh.me/2017/06/06/Jenkins-docker-kubectl-same-master</id><content type="html" xml:base="http://firsh.me/2017/06/06/Jenkins-docker-kubectl-same-master/">&lt;blockquote&gt;
  &lt;p&gt;git push 以后， jenkins 自动触发 代码打包，生成docker image , docker push 到 仓库，发布到环境里。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;安装jenkins&quot;&gt;安装jenkins&lt;/h1&gt;

&lt;p&gt;这里不建议用 Docker 镜像，因为下面 Jenkins 自身会需要调用 Docker 来启动任务。&lt;/p&gt;

&lt;p&gt;Jenkins + Docker + kubectl + git + Blue Ocean。&lt;/p&gt;

&lt;h2 id=&quot;导入-jenkins-源&quot;&gt;导入 jenkins 源&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins.io/redhat-stable/jenkins.repo
rpm --import http://pkg.jenkins.io/redhat-stable/jenkins.io.key


yum -y install jenkins 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;修改jenkins配置&quot;&gt;修改jenkins配置&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/sysconfig/jenkins

# 修改jenkins 目录
JENKINS_HOME=&quot;/opt/jenkins&quot;

# 修改jenkins 端口
JENKINS_PORT=&quot;9999&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;移动目录&quot;&gt;移动目录&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 将目录移动过来，否则程序报错
mv /var/lib/jenkins /opt/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;启动服务&quot;&gt;启动服务&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl start jenkins
systemctl enable jenkins
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;访问web-ui&quot;&gt;访问WEB UI&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://myip:9999/ 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;生成密钥&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 切换用户
su jenkins


# 生成key
ssh-keygen -t rsa -b 4096 -C &quot;jenkins@git&quot;

# 查看key信息
cat /home/jenkins/.ssh/id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;jenkins-后台配置&quot;&gt;jenkins 后台配置&lt;/h2&gt;

&lt;p&gt;进入 jenkins –&amp;gt; Credentials –&amp;gt; Add Credentials
&lt;img src=&quot;http://jicki.me/images/posts/jenkins/4.png&quot; alt=&quot;此处输入图片的描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;选择 系统管理 – &amp;gt; 管理插件&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;添加 Gradle Plugin 插件&lt;/li&gt;
  &lt;li&gt;添加 Git plugin 插件&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;常用插件

Build WIth Parameters   # 执行 构建 前手工输入参数

pipeline

Deploy Plugin   # build war 包以后部署

Email Extension Plugin  # 邮件发送

Multiple SCMs Plugin #多项目构建工具

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下载慢可直接下载 hpi 文件，通过高级 导入插件安装&lt;/p&gt;

&lt;p&gt;选择 系统管理 – &amp;gt; Global Tool Configuration&lt;/p&gt;

&lt;p&gt;安装JDK&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jicki.me/images/posts/jenkins/1.png&quot; alt=&quot;描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;安装 Gradle&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jicki.me/images/posts/jenkins/2.png&quot; alt=&quot;此处输入图片的描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;安装 Git&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jicki.me/images/posts/jenkins/3.png&quot; alt=&quot;此处输入图片的描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;创建项目  选择 自由风格 的项目&lt;/p&gt;

&lt;p&gt;源码管理选择 Git&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jicki.me/images/posts/jenkins/5.png&quot; alt=&quot;此处输入图片的描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;构建 选择  Invoke Gradle script&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jicki.me/images/posts/jenkins/6.png&quot; alt=&quot;此处输入图片的描述&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;构建触发器&quot;&gt;构建触发器&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 勾选 Poll SCM

# 每两分钟检查一次git代码是否有更新
H/2 * * * *
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;配置-邮件&quot;&gt;配置 邮件&lt;/h2&gt;

&lt;p&gt;首先必须安装 Email Extension Plugin 插件&lt;/p&gt;

&lt;p&gt;系统管理 –&amp;gt; 系统设置 – &amp;gt; Jenkins Location&lt;/p&gt;

&lt;p&gt;配置系统管理员邮件地址 — &amp;gt;  xxx@163.com&lt;/p&gt;

&lt;p&gt;配置 Extended E-mail Notification&lt;/p&gt;

&lt;p&gt;SMTP Server =&lt;/p&gt;

&lt;p&gt;点击高级&lt;/p&gt;

&lt;p&gt;勾选 Use SMTP Authentication&lt;/p&gt;

&lt;p&gt;输入 发送 用户 与 密码&lt;/p&gt;

&lt;p&gt;填写 SMTP port&lt;/p&gt;

&lt;p&gt;Default Content Type 选择 HTML (text/html)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Default Subject =  构建通知:$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!


Default Content = 

&amp;lt;b style=&quot;font-size:12px&quot;&amp;gt;(本邮件是程序自动下发的，请勿回复，&amp;lt;span style=&quot;color:red&quot;&amp;gt;请相关人员fix it,重新提交到git 构建&amp;lt;/span&amp;gt;)&amp;lt;br&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;hr&amp;gt;

&amp;lt;b style=&quot;font-size: 12px;&quot;&amp;gt;项目名称：$PROJECT_NAME&amp;lt;br&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;hr&amp;gt;

&amp;lt;b style=&quot;font-size: 12px;&quot;&amp;gt;构建编号：$BUILD_NUMBER&amp;lt;br&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;hr&amp;gt;

&amp;lt;b style=&quot;font-size: 12px;&quot;&amp;gt;GIT版本号：${GIT_REVISION}&amp;lt;br&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;hr&amp;gt;

&amp;lt;b style=&quot;font-size: 12px;&quot;&amp;gt;构建状态：$BUILD_STATUS&amp;lt;br&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;hr&amp;gt;

&amp;lt;b style=&quot;font-size: 12px;&quot;&amp;gt;触发原因：${CAUSE}&amp;lt;br&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;hr&amp;gt;

&amp;lt;b style=&quot;font-size: 12px;&quot;&amp;gt;构建日志地址：&amp;lt;a href=&quot;${BUILD_URL}console&quot;&amp;gt;${BUILD_URL}console&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;hr&amp;gt;

&amp;lt;b style=&quot;font-size: 12px;&quot;&amp;gt;构建地址：&amp;lt;a href=&quot;$BUILD_URL&quot;&amp;gt;$BUILD_URL&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;hr&amp;gt;

&amp;lt;b style=&quot;font-size: 12px;&quot;&amp;gt;变更集:${JELLY_SCRIPT,template=&quot;html&quot;}&amp;lt;br&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;hr&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://jicki.me/images/posts/jenkins/8.png&quot; alt=&quot;此处输入图片的描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;项目 – &amp;gt; 构建后操作 — &amp;gt; 添加 Editable Email Notification&lt;/p&gt;

&lt;p&gt;拉到最下面 — &amp;gt; 点击 Advanced Settings…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jicki.me/images/posts/jenkins/9.png&quot; alt=&quot;此处输入图片的描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Recipient List 添加 收件邮箱 多个邮件以空格 隔开&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jicki.me/images/posts/jenkins/10.png&quot; alt=&quot;此处输入图片的描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;原文作者 &lt;a href=&quot;https://jicki.me/&quot; title=&quot;Title&quot;&gt;小炒肉&lt;/a&gt; .&lt;/p&gt;</content><author><name>飞鱼</name></author><summary type="html">git push 以后， jenkins 自动触发 代码打包，生成docker image , docker push 到 仓库，发布到环境里。</summary></entry><entry><title type="html">CrateDB数据目录发生变动启动故障。</title><link href="http://firsh.me/2017/05/31/crateDb%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95%E5%8F%91%E7%94%9F%E4%BF%AE%E6%94%B9/" rel="alternate" type="text/html" title="CrateDB数据目录发生变动启动故障。" /><published>2017-05-31T00:00:00+08:00</published><updated>2017-05-31T00:00:00+08:00</updated><id>http://firsh.me/2017/05/31/crateDb%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95%E5%8F%91%E7%94%9F%E4%BF%AE%E6%94%B9</id><content type="html" xml:base="http://firsh.me/2017/05/31/crateDb%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95%E5%8F%91%E7%94%9F%E4%BF%AE%E6%94%B9/">&lt;p&gt;CrateDB数据目录发生变动启动故障。&lt;/p&gt;

&lt;h2 id=&quot;0x00&quot;&gt;0x00&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Crate Version 1.12
Linux Core 4.8
Node Number 5&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/QQ20170601-114658@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;今天项目要求重新启动crate数据库，因为用户名称发生了变动，所以导致文件没有权限。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1.查看了一番发现时文件的所属发生了变动&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-$xslt&quot;&gt;#用root用户执行
chown -R admin:admin /home/tod/data

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.修改完成重新启动。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-$xslt&quot;&gt;/crate -d H
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/images/QQ20170601-115231@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.确认启动成功&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-$xslt&quot;&gt;jps
&lt;/code&gt;&lt;/pre&gt;</content><author><name>飞鱼</name></author><summary type="html">CrateDB数据目录发生变动启动故障。</summary></entry><entry><title type="html">CICD。</title><link href="http://firsh.me/2017/05/30/CICD%E6%88%90%E5%8A%9F%E9%83%A8%E7%BD%B2/" rel="alternate" type="text/html" title="CICD。" /><published>2017-05-30T00:00:00+08:00</published><updated>2017-05-30T00:00:00+08:00</updated><id>http://firsh.me/2017/05/30/CICD%E6%88%90%E5%8A%9F%E9%83%A8%E7%BD%B2</id><content type="html" xml:base="http://firsh.me/2017/05/30/CICD%E6%88%90%E5%8A%9F%E9%83%A8%E7%BD%B2/">&lt;p&gt;CICD (travis) for my blog Success Full&lt;/p&gt;

&lt;h2 id=&quot;see&quot;&gt;See&lt;/h2&gt;

&lt;h2 id=&quot;travis-ci-&quot;&gt;Travis CI &lt;a href=&quot;https://travis-ci.org/zmatsh/zmatsh.github.io&quot;&gt;&lt;img src=&quot;https://travis-ci.org/zmatsh/zmatsh.github.io.svg?branch=master&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;使用jekyll搭建的一个免费博客，作为镜像托管在Github上&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>飞鱼</name></author><summary type="html">CICD (travis) for my blog Success Full</summary></entry><entry><title type="html">Kubernetes 1.5.1 版本升级。</title><link href="http://firsh.me/2016/12/21/kubernetes-1.5.1/" rel="alternate" type="text/html" title="Kubernetes 1.5.1 版本升级。" /><published>2016-12-21T00:00:00+08:00</published><updated>2016-12-21T00:00:00+08:00</updated><id>http://firsh.me/2016/12/21/kubernetes-1.5.1</id><content type="html" xml:base="http://firsh.me/2016/12/21/kubernetes-1.5.1/">&lt;p&gt;Kubernetes 1.5.1 版本升级！&lt;/p&gt;

&lt;h2 id=&quot;main&quot;&gt;Main&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md#server-binaries&quot;&gt;kubernetes1.5.1&lt;/a&gt;
  &lt;a href=&quot;http://kubernetes.io/kubernetes/third_party/swagger-ui/#!/api%2Fv1/createNamespacedPodTemplate&quot;&gt;swagger-ui&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;工作太忙稍后补上步骤。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;升级为替换docker镜像即可。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;替换kube-apiserver,kube-controller-manager,kube-scheduler镜像，替换kubectl kubelet kube-proxy&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>飞鱼</name></author><summary type="html">Kubernetes 1.5.1 版本升级！</summary></entry><entry><title type="html">vultr VPS运营商，删除信用卡，以及账户。</title><link href="http://firsh.me/2016/12/11/vultr-%E5%88%A0%E9%99%A4%E8%B4%A6%E6%88%B7/" rel="alternate" type="text/html" title="vultr VPS运营商，删除信用卡，以及账户。" /><published>2016-12-11T00:00:00+08:00</published><updated>2016-12-11T00:00:00+08:00</updated><id>http://firsh.me/2016/12/11/vultr-%E5%88%A0%E9%99%A4%E8%B4%A6%E6%88%B7</id><content type="html" xml:base="http://firsh.me/2016/12/11/vultr-%E5%88%A0%E9%99%A4%E8%B4%A6%E6%88%B7/">&lt;p&gt;今天大脑错乱了，买了个Vultr的VPS，速度很慢，远远不比Linode的VPS速度。&lt;/p&gt;

&lt;h2 id=&quot;文章&quot;&gt;文章&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;今天大脑错乱了，买了个Vultr的VPS，速度很慢，远远不比Linode的VPS速度。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;#下面的链接是删除账户的链接。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;用了一会发现速度实在太慢，还不稳定带宽比较低，所以想解绑信用卡，发现解决不了索性直接删除账户。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;hostus，linode的主机都不错，都稳定服务态度也好，推荐大家使用。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;下面是删除用户的链接地址。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://my.vultr.com/billing/cancel/&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>飞鱼</name></author><summary type="html">今天大脑错乱了，买了个Vultr的VPS，速度很慢，远远不比Linode的VPS速度。</summary></entry><entry><title type="html">Kubernetes集群安全配置案例[link]。</title><link href="http://firsh.me/2016/12/07/nginx-Kubernetes%E9%9B%86%E7%BE%A4%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE%E6%A1%88%E4%BE%8B/" rel="alternate" type="text/html" title="Kubernetes集群安全配置案例[link]。" /><published>2016-12-07T00:00:00+08:00</published><updated>2016-12-07T00:00:00+08:00</updated><id>http://firsh.me/2016/12/07/nginx-Kubernetes%E9%9B%86%E7%BE%A4%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE%E6%A1%88%E4%BE%8B</id><content type="html" xml:base="http://firsh.me/2016/12/07/nginx-Kubernetes%E9%9B%86%E7%BE%A4%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE%E6%A1%88%E4%BE%8B/">&lt;p&gt;Kubernetes集群安全配置案例。&lt;/p&gt;

&lt;p&gt;## 文章&lt;/p&gt;

&lt;p&gt;###Kubernetes 系统提供了三种认证方式：CA 认证、Token 认证 和 Base 认证。安全功能是一把双刃剑，它保护系统不被攻击，但是也带来额外的性能损耗。集群内的各组件访问 API Server 时，由于它们与 API Server 同时处于同一局域网内，所以建议用非安全的方式访问 API Server 效率更高。&lt;/p&gt;

&lt;p&gt;####接下来对集群的双向认证配置和简单认证配置过程进行详细说明。&lt;/p&gt;

&lt;p&gt;####双向认证配置&lt;/p&gt;

&lt;p&gt;####双向认证方式是最为严格和安全的集群安全配置方式，主要配置流程如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;生成根证书、API Server 服务端证书、服务端私钥、各个组件所用的客户端证书和客户端私钥。&lt;/li&gt;
  &lt;li&gt;修改 Kubernetes 各个服务进程的启动参数，启用双向认证模式。&lt;/li&gt;
  &lt;li&gt;详细的配置操作流程如下：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;####生成根证书&lt;/p&gt;

&lt;p&gt;#####用 openssl 工具生成 CA 证书，请注意将其中 subject 等参数改为用户所需的数据，CN 的值通常是域名、主机名或 IP 地址。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd /var/run/kubernetes
$ openssl genrsa -out dd_ca.key 2048
$ openssl req -x509 -new -nodes -key dd_ca.key -subj &quot;/CN=YOUDOMAIN.COM&quot; -days 5000 -out dd_ca.crt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;#####生成 API Server 服务端证书和私钥&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ openssl genrsa -out dd_server.key 2048
$ HN=`hostname`
$ openssl req -new -key dd_server.key -subj &quot;/CN=$HN&quot; -out dd_server.csr
$ openssl x509 -req -in dd_server.csr -CA dd_ca.crt -CAkey dd_ca.key -CAcreateserial-out dd_server.crt -days 5000
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;#####生成 Controller Manager 与 Scheduler 进程共用的证书和私钥&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ openssl genrsa -out dd_cs_client.key 2048
$ openssl req -new -key dd_cs_client.key -subj &quot;/CN=$HN&quot; -out dd_cs_client.csr
$ openssl x509 -req -in dd_cs_client.csr －CA dd_ca.crt -CAkey dd_ca.key -CAcreateserial -out dd_cs_client.crt -days 5000
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;#####生成 Kubelet 所用的客户端证书和私钥
######注意，这里假设 Kubelet 所在机器的 IP 地址为 192.168.1.129。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ openssl genrsa -out dd_kubelet_client.key 2048
$ openssl req -new -key dd_kubelet_client.key -subj &quot;/CN=192.168.1.129&quot; -out dd_kubelet_client.csr
$ openssl x509 -req -in dd_kubelet_client.csr -CA dd_ca.crt -CAkey dd_ca.key -CAcreateserial -out dd_kubelet_client.crt -days 5000
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;#####修改 API Server 的启动参数
#####增加 CA 根证书、Server 自身证书等参数并设置安全端口为 443.&lt;/p&gt;

&lt;p&gt;修改/etc/kubernetes/apiserver 配置文件的 KUBE_API_ARGS 参数：&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;KUBE_API_ARGS=&quot;--log-dir=/var/log/kubernetes --secure-port=443 --client_ca_file=/var/run/kubernetes/dd_ca.crt --tls-private-key-file=/var/run/kubernetes/dd_server.key --tls-cert-file=/var/run/kubernetes/dd_server.crt&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;####重启 kube-apiserver 服务：
####systemctl restart kube-apiserver
####验证 API Server 的 HTTPS 服务。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl https://kubernetes-master:443/api/v1/nodes --cert /var/run/kubernetes/dd_cs_client.crt --key /var/run/kubernetes/dd_cs_client.key --cacert /var/run/kubernetes/dd_ca.crt
修改 Controller Manager 的启动参数
修改/etc/kubernetes/controller-manager 配置文件
KUBE_CONTROLLER_MANAGER_ARGS=&quot;--log-dir=/var/log/kubernetes --service_account_private_key_file=/var/run/kubernetes/server.key --root-ca-file=/var/run/kubernetes/ca.crt --master=https://kubernetes-master:443 --kubeconfig=/etc/kubernetes/cmkubeconfig&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;创建/etc/kubernetes/cmkubeconfig 文件，配置证书等相关参数，具体内容如下：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apiVersion: v1
kind: Config
users
- name: controllermanager
  user:
    client-certificate: /var/run/kubernetes/dd_cs_client.crt
    client-key: /var/run/kubernetes/dd_cs_client.key
clusters:
- name: local
  cluster:
    certificate-authority: /var/run/kubernetes/dd_ca.crt
contexts:
- context:
    cluster: local
    user: controllermanager
  name: my-context
current-context: my-context
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;重启 kube-controller-manager 服务：&lt;/p&gt;

&lt;h1 id=&quot;systemctl-restart-kube-controller-manager&quot;&gt;systemctl restart kube-controller-manager&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;配置各个节点上的 Kubelet 进程&lt;/li&gt;
  &lt;li&gt;复制 Kubelet 的证书、私钥 与 CA 根证书到所有 Node 上。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ scp /var/run/kubernetes/dd_kubelet* root@kubernetes-minion1:/home
$ scp /var/run/kubernetes/dd_ca.* root@kubernetes-minion:/home
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;在每个 Node 上创建/var/lib/kubelet/kubeconfig 文件，内容如下：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apiVersion: v1
kind: Config
users:
- name: kubelet
  user:
    client-certificats: /home/dd_kubelet_client.crt
    client-key: /home/dd_kubelet_client.key
clusters:
- name: local
  cluster:
    certificate-authority: /home/dd_ca.crt
contexts:
- context:
    cluster: local
    user: kubelet
  name: my-context
current-context: my-context
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;修改 Kubelet 的启动参数，以修改/etc/kubernetes/kubelet 配置文件为例：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;KUBELET_API_SERVER=&quot;--api_servers=https://kubernetes-master:443&quot;
KUBELET_ARGS=&quot;--pod_infro_container_image=192.168.1.128:1180/google_containers/pause:latest --cluster_dns=10.2.0.100 --cluster_domain=cluster.local --kubeconfig=/var/lib/kubelet/kubeconfig&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;#重启 kubelet 服务：&lt;/p&gt;

&lt;p&gt;###systemctl restart kubelet&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;配置 kube-proxy&lt;/li&gt;
  &lt;li&gt;首先，创建/var/lib/kubeproxy/proxykubeconfig 文件，内容如下：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apiVersion: v1
kind: Config
users:
- name: kubeproxy
  user:
    client-certificate: /home/dd_kubelet_client.crt
    client-key: /home/dd_kubelet_client.key
clusters:
- name: local
  cluster:
    certificate-authority: /home/dd_ca.crt
contexts:
- context:
    cluster: local
    user: kubeproxy
  name: my-context
current-context: my-context
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;然后，修改 kube-proxy 的启动参数，引用上述文件并指明 API Server 在安全模式下的访问地址，以修改配置文件/etc/kubenetes/proxy 为例：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;KUBE_PROXY_ARGS=&quot;--kubeconfig=/var/lib/kubeproxy/proxykubeconfig --master=https://kubenetes-master:443&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;重启 kube-proxy 服务：&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;systemctl-restart-kube-proxy&quot;&gt;systemctl restart kube-proxy&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;至此，一个双向认证的 Kubernetes 集群环境就搭建完成了。&lt;/li&gt;
  &lt;li&gt;简单认证配置&lt;/li&gt;
  &lt;li&gt;除了双向认证方式，Kubernets 也提供了基于 Token 和 HTTP Base 的简单认证方式。通信方式仍然采用 HTTPS，但不使用数字证书。&lt;/li&gt;
  &lt;li&gt;采用基于 Token 和 HTTP Base 的简单认证方式时，API Server 对外暴露 HTTPS 端口，客户端提供 Token 或用户名、密码来完成认证过程。这里需要说明的一点是 Kubelet 比较特殊，它同时支持双向认证与简单认证两种模式，其他组件智能配置为双向认证或非安全模式。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;api-server-基于-token-认证的配置过程如下&quot;&gt;API Server 基于 Token 认证的配置过程如下&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;建立包括用户名、密码和 UID 的文件 token_auth_file：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat /root/token_auth_file
dingmingk,dingmingk,1
admin,admin,2
system,system,3
修改 API Server 的配置，采用上述文件进行安全认证
$ vi /etc/kubernetes/apiserver
KUBE_API_ARGS=&quot;--secure-port=443 --token_auth_file=/root/token_auth_file&quot;
重启 API Server 服务
# systemctl restart kube-apiserver
用 curl 验证连接 API Server
$ curl https://kubenetes-master:443/version --header &quot;Authorization: Bearer dingmingk&quot; -k
{
  &quot;major&quot;: &quot;1&quot;,
  &quot;minor&quot;: &quot;0&quot;,
  &quot;gitVersion&quot;: &quot;v1.0.0&quot;,
  &quot;gitCommit&quot;: &quot;xxxHASHCODE&quot;,
  &quot;gitTreeState&quot;: &quot;clean&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;API Server 基于 HTTP Base 认证的配置过程如下&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建包括用户名、密码和 UID 的文件 basic_auth_file：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat /root/basic_auth_file
dingmingk,dingmingk,1
admin,admin,2
system,system,3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;修改 API Server 的配置，采用上述文件进行安全认证&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ vi /etc/kubernetes/apiserver&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;KUBE_API_ARGS=&quot;--secure-port=443 --basic_auth_file=/root/basic_auth_file&quot;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;重启-api-server-服务&quot;&gt;重启 API Server 服务&lt;/h3&gt;

&lt;h3 id=&quot;systemctl-restart-kube-apiserver&quot;&gt;systemctl restart kube-apiserver&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;用 curl 验证连接 API Server&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl https://kubernetes-master:443/version --basic -u dingmingk:dingmingk -k
{
  &quot;major&quot;: &quot;1&quot;,
  &quot;minor&quot;: &quot;0&quot;,
  &quot;gitVersion&quot;: &quot;v1.0.0&quot;,
  &quot;gitCommit&quot;: &quot;xxxHASHCODE&quot;,
  &quot;gitTreeState&quot;: &quot;clean&quot;
}
使用 Kubelet 时则需要指定用户名和密码来访问 API Server
$ kubectl get nodes --server=&quot;https://kubernetes-master:443&quot; --api-version=&quot;v1&quot; --username=&quot;dingmingk&quot; --password=&quot;dingmingk&quot; --insecure-skip-tls-verify=true
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###kubectl config set-cluster
####在kubeconfig配置文件中设置一个集群项。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;摘要&lt;/li&gt;
  &lt;li&gt;在kubeconfig配置文件中设置一个集群项。 如果指定了一个已存在的名字，将合并新字段并覆盖旧字段。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl config set-cluster NAME [--server=server] [--certificate-authority=path/to/certficate/authority] [--insecure-skip-tls-verify=true]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;示例
    &lt;h1 id=&quot;仅设置e2e集群项中的server字段不影响其他字段&quot;&gt;仅设置e2e集群项中的server字段，不影响其他字段&lt;/h1&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl config set-cluster e2e --server=https://1.2.3.4
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h1 id=&quot;向e2e集群项中添加认证鉴权数据&quot;&gt;向e2e集群项中添加认证鉴权数据&lt;/h1&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl config set-cluster e2e --certificate-authority=~/.kube/e2e/kubernetes.ca.crt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;####取消dev集群项中的证书检查&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;html
kubectl config set-cluster e2e --insecure-skip-tls-verify=true
选项
      --api-version=&quot;&quot;: 设置kuebconfig配置文件中集群选项中的api-version。
      --certificate-authority=&quot;&quot;: 设置kuebconfig配置文件中集群选项中的certificate-authority路径。
      --embed-certs[=false]: 在是否则kubeconfig配置文件中嵌入客户端证书/key。
      --insecure-skip-tls-verify[=false]: 设置kuebconfig配置文件中集群选项中的insecure-skip-tls-verify开关。
      --server=&quot;&quot;: 设置kuebconfig配置文件中集群选项中的server。
继承自父命令的选项
      --alsologtostderr[=false]: 同时输出日志到标准错误控制台和文件。
      --certificate-authority=&quot;&quot;: 用以进行认证授权的.cert文件路径。
      --client-certificate=&quot;&quot;: TLS使用的客户端证书路径。
      --client-key=&quot;&quot;: TLS使用的客户端密钥路径。
      --cluster=&quot;&quot;: 指定使用的kubeconfig配置文件中的集群名。
      --context=&quot;&quot;: 指定使用的kubeconfig配置文件中的环境名。
      --insecure-skip-tls-verify[=false]: 如果为true，将不会检查服务器凭证的有效性，这会导致你的HTTPS链接变得不安全。
      --kubeconfig=&quot;&quot;: 命令行请求使用的配置文件路径。
      --log-backtrace-at=:0: 当日志长度超过定义的行数时，忽略堆栈信息。
      --log-dir=&quot;&quot;: 如果不为空，将日志文件写入此目录。
      --log-flush-frequency=5s: 刷新日志的最大时间间隔。
      --logtostderr[=true]: 输出日志到标准错误控制台，不输出到文件。
      --match-server-version[=false]: 要求服务端和客户端版本匹配。
      --namespace=&quot;&quot;: 如果不为空，命令将使用此namespace。
      --password=&quot;&quot;: API Server进行简单认证使用的密码。
  -s, --server=&quot;&quot;: Kubernetes API Server的地址和端口号。
      --stderrthreshold=2: 高于此级别的日志将被输出到错误控制台。
      --token=&quot;&quot;: 认证到API Server使用的令牌。
      --user=&quot;&quot;: 指定使用的kubeconfig配置文件中的用户名。
      --username=&quot;&quot;: API Server进行简单认证使用的用户名。
      --v=0: 指定输出日志的级别。
      --vmodule=: 指定输出日志的模块，格式如下：pattern=N，使用逗号分隔。
     &lt;/code&gt;&lt;/p&gt;</content><author><name>飞鱼</name></author><summary type="html">Kubernetes集群安全配置案例。</summary></entry><entry><title type="html">nginx的重定向进行防盗链设置。</title><link href="http://firsh.me/2016/12/04/nginx%E9%98%B2%E7%9B%97%E9%93%BE/" rel="alternate" type="text/html" title="nginx的重定向进行防盗链设置。" /><published>2016-12-04T00:00:00+08:00</published><updated>2016-12-04T00:00:00+08:00</updated><id>http://firsh.me/2016/12/04/nginx%E9%98%B2%E7%9B%97%E9%93%BE</id><content type="html" xml:base="http://firsh.me/2016/12/04/nginx%E9%98%B2%E7%9B%97%E9%93%BE/">&lt;p&gt;对博客的保护，以及原创的文章图片进行防盗链设置。&lt;/p&gt;

&lt;h2 id=&quot;文章&quot;&gt;文章&lt;/h2&gt;

&lt;p&gt;测试url: &lt;a href=&quot;http://firsh.me:8888/dockericon.png&quot;&gt;http://firsh.me:8888/dockericon.png&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;code-nginx.conf&lt;/p&gt;

    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  location ~* \.(gif|jpg|png|jpeg)$ {
      expires     30d;
      valid_referers *.firsh.me firsh.me;
      if ($invalid_referer) {
      rewrite ^/ http://firsh.me:8888/40x.html;
      #return 404;
      }
   }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>飞鱼</name></author><summary type="html">对博客的保护，以及原创的文章图片进行防盗链设置。</summary></entry><entry><title type="html">Java metrics</title><link href="http://firsh.me/2016/12/04/Java-metrics/" rel="alternate" type="text/html" title="Java metrics" /><published>2016-12-04T00:00:00+08:00</published><updated>2016-12-04T00:00:00+08:00</updated><id>http://firsh.me/2016/12/04/Java-metrics</id><content type="html" xml:base="http://firsh.me/2016/12/04/Java-metrics/">&lt;p&gt;项目中有对程序的一个健康检查，以及TPS,QPS等。&lt;/p&gt;

&lt;h2 id=&quot;文档&quot;&gt;文档&lt;/h2&gt;

&lt;p&gt;*Maven&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-code&quot;&gt; &amp;lt;!--  metrics * --&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;io.dropwizard.metrics&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;metrics-core&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;3.1.0&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;io.dropwizard.metrics&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;metrics-servlets&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;3.1.0&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;com.codahale.metrics&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;metrics-healthchecks&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;3.0.1&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;com.github.davidb&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;metrics-influxdb&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;0.8.2&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;核心工具类&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import com.codahale.metrics.*;
import com.ktyh.think.filter.prometheus.DropwizardExportSetUp;
import io.prometheus.client.CollectorRegistry;
import metrics_influxdb.InfluxdbReporter;
import metrics_influxdb.api.protocols.InfluxdbProtocols;
import org.slf4j.LoggerFactory;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import java.util.concurrent.TimeUnit;
/**
 * Created by zhangjianxin on 2016/11/3.
 * metrics core config and static void formart
 */
public class MetricsCore {
    /**
     * 因数据存在争议，改为单例模式。
     */
    private static final MetricRegistry METRIC_REGISTRY = new MetricRegistry();
    private static String HOST_IP_ADDRESS;
    private static String USERNAME;
    private static String PASSWORD;
    private static String DATABASE;
    private static int PORT;
    private static ServletRequest ARG_REQ;
    private static ServletResponse ARG_RESP;
    /**
     * @author 内存使用程度MB
     */
    Gauge&lt;span class=&quot;nt&quot;&gt;&amp;lt;Long&amp;gt;&lt;/span&gt; getFreeMemory = () -&amp;gt; toMb(Runtime.getRuntime().freeMemory());
    Gauge&lt;span class=&quot;nt&quot;&gt;&amp;lt;Long&amp;gt;&lt;/span&gt; getTotalMemory = () -&amp;gt; toMb(Runtime.getRuntime().totalMemory());

    public static synchronized MetricRegistry getInstance() {
        return METRIC_REGISTRY;
    }

    public static ScheduledReporter influxdbReporter(MetricRegistry metrics) {
        InitInfluxdbConfig();//初始化
        return InfluxdbReporter.forRegistry(metrics)
                .protocol(InfluxdbProtocols.http(HOST_IP_ADDRESS, PORT, USERNAME, PASSWORD, DATABASE))
                .convertRatesTo(TimeUnit.SECONDS)
                .convertDurationsTo(TimeUnit.MILLISECONDS)
                .filter(MetricFilter.ALL)
                .skipIdleMetrics(false)
                .build();
    }


    public static void freeMemoryForJvm(MetricRegistry metrics) {
        metrics.register(MetricRegistry.name(&quot;memory_free_mb_size&quot;), new Gauge&lt;span class=&quot;nt&quot;&gt;&amp;lt;Long&amp;gt;&lt;/span&gt;() {
            @Override
            public Long getValue() {
                return toMb(Runtime.getRuntime().freeMemory());
            }
        });
    }

    public static void totalMemoryForJvm(MetricRegistry metrics) {
        metrics.register(MetricRegistry.name(&quot;memory_total_mb_size&quot;), new Gauge&lt;span class=&quot;nt&quot;&gt;&amp;lt;Long&amp;gt;&lt;/span&gt;() {
            @Override
            public Long getValue() {
                return toMb(Runtime.getRuntime().totalMemory());
            }
        });
    }

    //转换为MB
    private static long toMb(long bytes) {
        return bytes / 1024 / 1024;
    }

    /**
     * 初始化时序数据库配置，可以通过反射进行更改
     **/

    public static void InitInfluxdbConfig() {
        PORT = 8085;
        HOST_IP_ADDRESS = &quot;192.168.1.102&quot;;
        USERNAME = &quot;root&quot;;
        PASSWORD = &quot;root&quot;;
        // DATABASE = &quot;Metrics&quot;;
        DATABASE = &quot;_internal&quot;;
    }

    /**
     * 传递初始化参数，用单例去回调
     *
     * @param &quot;Servlet request and respone&quot;
     */

    public static void requestFullArgs(ServletRequest req, ServletResponse resp) {
        ARG_REQ = req;
        ARG_RESP = resp;
    }

    /**
     * Reporter 数据的展现位置
     *
     * @param metrics
     * @return
     */

    public ConsoleReporter consoleReporter(MetricRegistry metrics) {
        return ConsoleReporter.forRegistry(metrics)
                .convertRatesTo(TimeUnit.SECONDS)
                .convertDurationsTo(TimeUnit.MILLISECONDS)
                .build();
    }

    public Slf4jReporter slf4jReporter(MetricRegistry metrics) {
        return Slf4jReporter.forRegistry(metrics)
                .outputTo(LoggerFactory.getLogger(&quot;demo.metrics&quot;))
                .convertRatesTo(TimeUnit.SECONDS)
                .convertDurationsTo(TimeUnit.MILLISECONDS)
                .build();
    }

    public JmxReporter jmxReporter(MetricRegistry metrics, String doMain) {
        return JmxReporter.forRegistry(metrics)
                .inDomain(doMain)
                .convertRatesTo(TimeUnit.SECONDS)
                .convertDurationsTo(TimeUnit.MILLISECONDS)
                .filter(MetricFilter.ALL).build();
    }

    /**
     * Meters会将最近1分钟，5分钟，15分钟的TPS（每秒处理的request数）给打印出来，还有所有时间的TPS。
     *
     * @param metrics
     * @return
     */
    public Meter requestMeter(MetricRegistry metrics, String arg) {
        return metrics.meter(MetricRegistry.name(&quot;meter_event_&quot; + arg));
    }

    /**
     * 直方图
     *
     * @param metrics
     * @return
     */

    public Histogram responseSizes(MetricRegistry metrics, String arg) {
        return metrics.histogram(MetricRegistry.name(&quot;size_histogram_&quot; + arg));
    }

    /**
     * 计数器
     *
     * @param metrics
     * @return
     */

    public Counter pendingJobs(MetricRegistry metrics, String arg) {
        return metrics.counter(MetricRegistry.name(&quot;counter_Job_&quot; + arg));
    }

    /**
     * 计时器
     *
     * @param metrics
     * @return
     */

    public Timer responsesExecureTime(MetricRegistry metrics, String arg) {
        return metrics.timer(MetricRegistry.name(&quot;response_timer_&quot; + arg));
    }

    public Meter requestURLCount(MetricRegistry metrics, String arg) {
        return metrics.meter(MetricRegistry.name(&quot;request_URL_&quot; + arg));
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;##目前这种方式只是将数据推送到influxdb ，以及prometheus 。&lt;/p&gt;

&lt;p&gt;1 数据采集&lt;/p&gt;

&lt;p&gt;2 采集点(Filter,Controller,Service)&lt;/p&gt;

&lt;p&gt;3 数据推送(influxdb,primetheus,jmx,console,cvs等。)&lt;/p&gt;</content><author><name>飞鱼</name></author><summary type="html">项目中有对程序的一个健康检查，以及TPS,QPS等。</summary></entry><entry><title type="html">vim-markdown-toc 发布 v1.0 版</title><link href="http://firsh.me/2016/10/22/vim-markdown-toc-release/" rel="alternate" type="text/html" title="vim-markdown-toc 发布 v1.0 版" /><published>2016-10-22T00:00:00+08:00</published><updated>2016-10-22T00:00:00+08:00</updated><id>http://firsh.me/2016/10/22/vim-markdown-toc-release</id><content type="html" xml:base="http://firsh.me/2016/10/22/vim-markdown-toc-release/">&lt;p&gt;前几天，第一款由我独立开发的 Vim 插件 vim-markdown-toc 升级了功能，发布了 v1.0 版本。&lt;/p&gt;

&lt;p&gt;它的主要功能是为 Markdown 文件生成 toc（Table of Contents）、更新已经存在的 toc 和在保存时自动更新 toc。&lt;/p&gt;

&lt;p&gt;说它是当前使用 Vim 编辑 Markdown 文件时维护 Table of Contents 的最佳解决方案应该不为过。&lt;/p&gt;

&lt;h2 id=&quot;下载地址&quot;&gt;下载地址&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mzlogin/vim-markdown-toc&quot;&gt;vim-markdown-toc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;主要更新&quot;&gt;主要更新&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;支持使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;:UpdateToc&lt;/code&gt; 命令更新已经存在的 toc。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;支持保存时自动更新 toc。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;功能演示&quot;&gt;功能演示&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mzlogin/vim-markdown-toc/master/screenshots/english.gif&quot; alt=&quot;vim-markdown-toc-screenshot&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;一些体会&quot;&gt;一些体会&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;相比于 &lt;a href=&quot;https://github.com/mzlogin/awesome-adb&quot;&gt;awesome-adb&lt;/a&gt; 的一千多个 Star，&lt;a href=&quot;https://github.com/mzlogin/vim-markdown-toc&quot;&gt;vim-markdown-toc&lt;/a&gt; 的三十多个 Star 在我心目中含金量更高。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;做能挣钱的东西，或者对自己有用的东西。&lt;/p&gt;

    &lt;p&gt;有天和我们组去年来的小朋友聊天，他说了一个观点我觉得很有道理：做能给自己产生经济效益的东西，你才有动力持续下去。虽然听起来功利，但不无道理。&lt;/p&gt;

    &lt;p&gt;这么一个插件显然不能挣钱，它属于第二种。本次更新的功能其实在半年前就有网友提过需求，见 &lt;a href=&quot;https://github.com/mzlogin/vim-markdown-toc/issues/6&quot;&gt;#6&lt;/a&gt;，但我却迟迟没有动手。半年后的某个夜里，突然就决定要把这些做出来，并且花了几个小时就做完了。究其原因，还是因为自己现在有了需求，我现在要维护几份比较长的 Markdown 文档，如果每次手动去删除已有 toc 然后再次生成，虽然比纯手工写 toc 要不知道方便和准确到哪里去了，但归根结底还是不够完美。果然最后用着自己做的功能替自己省下不少重复劳动时，那种感觉也是很爽的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;酒香也怕巷子深。&lt;/p&gt;

    &lt;p&gt;发布了个人的项目后，适当地在相关的社区进行推广，让更多的人享受到你的劳动成果，帮助验证和反馈，也能给自己带来更多的成就感和关注度。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>飞鱼</name></author><summary type="html">前几天，第一款由我独立开发的 Vim 插件 vim-markdown-toc 升级了功能，发布了 v1.0 版本。</summary></entry><entry><title type="html">一道在知乎很火的 Java 题——如何输出 ab</title><link href="http://firsh.me/2016/09/20/java-output-ab/" rel="alternate" type="text/html" title="一道在知乎很火的 Java 题——如何输出 ab" /><published>2016-09-20T00:00:00+08:00</published><updated>2016-09-20T00:00:00+08:00</updated><id>http://firsh.me/2016/09/20/java-output-ab</id><content type="html" xml:base="http://firsh.me/2016/09/20/java-output-ab/">&lt;p&gt;这是一个源自知乎的话题，原贴链接：&lt;a href=&quot;https://www.zhihu.com/question/50801791&quot;&gt;一道百度的面试题，有大神会嘛？&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;虽然我不是大神，但我也点进去看了一下，思考了一会之后有了一些思路，然后去看其它人的答案的时候果然全都已经被各路大神们先想到并贴出来了，所以我就不去凑热闹写重复答案了，整理一下网友们的智慧在这里自娱自乐好了。&lt;/p&gt;

&lt;h2 id=&quot;题目&quot;&gt;题目&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/java/output-ab.jpg&quot; alt=&quot;java-output-ab&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;思路一&quot;&gt;思路一&lt;/h2&gt;

&lt;p&gt;作为一个多年前也见过不少笔试题的少年，看到这个题目的第一想法是脑筋急转弯——注入一段逻辑直接改变原 if 结构。&lt;/p&gt;

&lt;h3 id=&quot;解法一&quot;&gt;解法一&lt;/h3&gt;

&lt;p&gt;填入内容 &lt;code class=&quot;highlighter-rouge&quot;&gt;true){System.out.print(&quot;a&quot;);}if(false&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;类似地也可以填入 &lt;code class=&quot;highlighter-rouge&quot;&gt;true){System.out.print(&quot;ab&quot;);return;}if(false&lt;/code&gt; 等。&lt;/p&gt;

&lt;p&gt;当初大学时单纯的少年可是很难想出这样的套路的，时间改变了我们啊。&lt;/p&gt;

&lt;h2 id=&quot;思路二&quot;&gt;思路二&lt;/h2&gt;

&lt;p&gt;如果正经遵从题目的原代码结构，那就得想办法构造一段代码，既能输出 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;，又能返回 &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;解法二&quot;&gt;解法二&lt;/h3&gt;

&lt;p&gt;我也想到能否使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;System.out.print&lt;/code&gt; 的返回值来做文章，但奈何并不记得它返回什么，首先让我们复习一下 &lt;code class=&quot;highlighter-rouge&quot;&gt;PrintStream&lt;/code&gt; 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;println&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt; 方法的区别：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;方法&lt;/th&gt;
      &lt;th&gt;功能&lt;/th&gt;
      &lt;th&gt;返回值&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;print&lt;/td&gt;
      &lt;td&gt;打印一个值或者对象&lt;/td&gt;
      &lt;td&gt;void&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;println&lt;/td&gt;
      &lt;td&gt;打印并换行&lt;/td&gt;
      &lt;td&gt;void&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;printf&lt;/td&gt;
      &lt;td&gt;格式化打印&lt;/td&gt;
      &lt;td&gt;PrintStream&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;所以适用的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt;，它的返回值是 &lt;code class=&quot;highlighter-rouge&quot;&gt;PrintStream&lt;/code&gt; 类型的 &lt;code class=&quot;highlighter-rouge&quot;&gt;System.out&lt;/code&gt;，判它是否为空即可。&lt;/p&gt;

&lt;p&gt;填入内容 &lt;code class=&quot;highlighter-rouge&quot;&gt;System.out.printf(&quot;a&quot;) == null&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;经测试填入 &lt;code class=&quot;highlighter-rouge&quot;&gt;System.out.append(&quot;a&quot;) == null&lt;/code&gt; 也是可以达到效果的。&lt;/p&gt;

&lt;h3 id=&quot;解法三&quot;&gt;解法三&lt;/h3&gt;

&lt;p&gt;仍然是思路二，但从匿名内部类来作文章。&lt;/p&gt;

&lt;p&gt;实现代码：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里利用的知识点是匿名内部类可以声明基类没有的新方法并且马上调用。&lt;/p&gt;

&lt;h3 id=&quot;解法四&quot;&gt;解法四&lt;/h3&gt;

&lt;p&gt;使用 Java 8 里的 lambda 来实现思路二。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BooleanSupplier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;})).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAsBoolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;严格来讲这个不一定能算作正确答案，因为要增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;import java.util.function.BooleanSupplier;&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;脑洞大开&quot;&gt;脑洞大开&lt;/h2&gt;

&lt;p&gt;讲完严肃的解法，来看看网友 &lt;a href=&quot;https://www.zhihu.com/people/qiong-xiao-zi-158&quot;&gt;穷小子&lt;/a&gt; 开脑洞的思路：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    if ( ) {&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    } else {&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    }&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果没有特意说明只能在括号里加东西，倒真是个妙计！&lt;/p&gt;

&lt;p&gt;同样看得我一愣一愣的还有 &lt;a href=&quot;https://www.zhihu.com/people/caiwei710&quot;&gt;caiwei&lt;/a&gt; 同学的答案，他和朋友们发现题目里少写了个大括号（真的），于是我们看到他的朋友老方的解决方案：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/java/add-brace.jpg&quot; alt=&quot;add-brace&quot; /&gt;&lt;/p&gt;

&lt;p&gt;真是防不胜防啊~不过我喜欢！:+1:&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/50801791/answer/122781965&quot;&gt;RednaxelaFX 的回答&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/50801791/answer/122773831&quot;&gt;仓鼠君 的回答&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/50801791/answer/122769426&quot;&gt;放开那女孩 的回答&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/50801791/answer/122863062&quot;&gt;穷小子 的回答&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/50801791/answer/122795854&quot;&gt;caiwei 的回答&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>飞鱼</name></author><summary type="html">这是一个源自知乎的话题，原贴链接：一道百度的面试题，有大神会嘛？</summary></entry></feed>